{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2c714b2c_37e7e777",
        "filename": "media/codec2/sfplugin/CCodec.cpp",
        "patchSetId": 25
      },
      "lineNbr": 1194,
      "author": {
        "id": 1021605
      },
      "writtenOn": "2024-03-19T21:19:39Z",
      "side": 1,
      "message": "nit: could we use 0,0-16,16 here? using the whole frame may result in suboptimal result if we need to convert this to a map.",
      "range": {
        "startLine": 1194,
        "startChar": 39,
        "endLine": 1194,
        "endChar": 52
      },
      "revId": "a3e76742dc467050d8ec19eb8247623d5201cd06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0323eabb_5efa68ac",
        "filename": "media/codec2/sfplugin/CCodecConfig.cpp",
        "patchSetId": 25
      },
      "lineNbr": 1901,
      "author": {
        "id": 1021605
      },
      "writtenOn": "2024-03-19T21:19:39Z",
      "side": 1,
      "message": "these may still overflow (even as ints). I recommend doing the following logic:\n\nswap left, right if needed\n\n left_clamped \u003d (uint32_t)clamp(min(left, right), 0, width)\n right_clamped \u003d (uint32_t)clamp(max(left, right), 0, width)\n then width \u003d right_clamped - left_clamped // now guaranteed to not overflow\n left_clamped can be used as left\n \n same for height/top\n \n alternately, you can clamp to (0, MAX_INT) if you don\u0027t want to assume to know the width/height.",
      "range": {
        "startLine": 1901,
        "startChar": 53,
        "endLine": 1901,
        "endChar": 65
      },
      "revId": "a3e76742dc467050d8ec19eb8247623d5201cd06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}