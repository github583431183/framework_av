{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "268d2229_6209f2ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1133568
      },
      "writtenOn": "2021-02-18T03:18:22Z",
      "side": 1,
      "message": "Hi Mikhail,\n\nThis change is to support HDMI source to MSD sink software (inter-module) patching. This routing can be initiated by a TvInputService application requesting HDMI TV input hardware overrideAudioSink to BUS.\n\nKind regards,",
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa76766f_938cc60f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1133568
      },
      "writtenOn": "2021-02-18T21:37:51Z",
      "side": 1,
      "message": "Hi Mikhail, thank you for your review. I will address your feedback.",
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "445ed239_5fdeb696",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1133568
      },
      "writtenOn": "2021-02-22T22:27:32Z",
      "side": 1,
      "message": "Hi Mikhail - PS2 aims to address your feedback and is ready for your review.",
      "parentUuid": "fa76766f_938cc60f",
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65d91558_05fcfdad",
        "filename": "services/audiopolicy/managerdefault/AudioPolicyManager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1347,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2021-02-18T18:16:10Z",
      "side": 1,
      "message": "I would suggest naming this parameter \u0027msdIsSource\u0027, here and in buildMsdPatch.",
      "range": {
        "startLine": 1347,
        "startChar": 60,
        "endLine": 1347,
        "endChar": 69
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "adf7e5fa_61848308",
        "filename": "services/audiopolicy/managerdefault/AudioPolicyManager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1347,
      "author": {
        "id": 1133568
      },
      "writtenOn": "2021-02-18T21:37:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "65d91558_05fcfdad",
      "range": {
        "startLine": 1347,
        "startChar": 60,
        "endLine": 1347,
        "endChar": 69
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d89b2557_0307329d",
        "filename": "services/audiopolicy/managerdefault/AudioPolicyManager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1361,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2021-02-18T18:16:10Z",
      "side": 1,
      "message": "To avoid checks on this parameter all over the place, I would suggest splitting this method into two: one selects modules / devices / profiles and the other finds the best match from them. It should make easier reasoning about validity of each separately.",
      "range": {
        "startLine": 1361,
        "startChar": 50,
        "endLine": 1361,
        "endChar": 61
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fb6c5e0_b090439e",
        "filename": "services/audiopolicy/managerdefault/AudioPolicyManager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1361,
      "author": {
        "id": 1133568
      },
      "writtenOn": "2021-02-18T21:37:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d89b2557_0307329d",
      "range": {
        "startLine": 1361,
        "startChar": 50,
        "endLine": 1361,
        "endChar": 61
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02afd533_6ebd7bbe",
        "filename": "services/audiopolicy/tests/audiopolicymanager_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 589,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2021-02-18T18:16:10Z",
      "side": 1,
      "message": "In real world, what is the condition for establishing the patch from HDMI input to MSD?",
      "range": {
        "startLine": 589,
        "startChar": 4,
        "endLine": 589,
        "endChar": 88
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a11292b_312015ab",
        "filename": "services/audiopolicy/tests/audiopolicymanager_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 589,
      "author": {
        "id": 1133568
      },
      "writtenOn": "2021-02-18T21:37:51Z",
      "side": 1,
      "message": "Panel TV devices with HDMI input can receive compressed audio over this link requiring decoding (and optionally other output device rendering) before routing to output devices like internal speaker. On Panel TV devices with MSD, this processing is expected to be done by MSD.",
      "parentUuid": "02afd533_6ebd7bbe",
      "range": {
        "startLine": 589,
        "startChar": 4,
        "endLine": 589,
        "endChar": 88
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcee536c_49096216",
        "filename": "services/audiopolicy/tests/audiopolicymanager_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 589,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2021-02-19T00:12:06Z",
      "side": 1,
      "message": "Apologies for an unclear question. I understand the high level use case, I\u0027m wondering where in the APM code we install the patch from HDMI input to MSD. Is it the new code in createAudioPatchInternal which says \"if first sink is to MSD, establish single MSD patch\"? I\u0027m curious what are the events at the framework / app level that will cause taking that route. Is it the responsibility of some app?",
      "parentUuid": "0a11292b_312015ab",
      "range": {
        "startLine": 589,
        "startChar": 4,
        "endLine": 589,
        "endChar": 88
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66f1e27c_daf409fd",
        "filename": "services/audiopolicy/tests/audiopolicymanager_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 589,
      "author": {
        "id": 1133568
      },
      "writtenOn": "2021-02-19T04:28:50Z",
      "side": 1,
      "message": "The use case I\u0027m testing is a TvInputService application with Session acquiring HDMI tv input hardware like:\n\nmHardware \u003d mTvInputManager.acquireTvInputHardware(mHdmiHwId, mTvInputInfo, mHardwareCallback);\n\nand invoking\n\nmHardware.overrideAudioSinkWithDevice(device,\n                            0 /* default sampling rate */, AudioFormat.CHANNEL_OUT_DEFAULT,\n                            AudioFormat.ENCODING_DEFAULT);\n\nwhere device.getType() \u003d\u003d AudioDeviceInfo.TYPE_BUS. The device is found from set of available output devices from AudioManager.getDevices().\n\n\nThe overrideAudioSink function is found in frameworks/base/services/core/java/com/android/server/tv/TvInputHardwareManager.java . This will update the audio config, and eventually call:\n\n                mAudioManager.createAudioPatch(\n                        audioPatchArray,\n                        new AudioPortConfig[] { sourceConfig },\n                        sinkConfigs.toArray(new AudioPortConfig[sinkConfigs.size()]));\n\nNormally, without overrideAudioSink, the TvInputHardwareManager will return the default sink from audio policy. For an MSD enabled device, this would be the final destination (e.g. internal speaker).\n\nFor this change, the expectation is that a TvInputService app will be knowledgable enough to request / override routing to the OUT_BUS device, rather than leaving it to the system to route to the default output sink. One advantage of this approach is for source :\u003d HDMI input to sink :\u003d HDMI output scenarios. The app can choose to pass through in this case (overrideAudioSink HDMI output), but when internal speaker is active, route to BUS instead to get device processing.\n\nThe alternative to this approach is for the createAudioPatchInternal to implement this MSD insert logic without the app\u0027s knowledge, but comes with a few problems, such as needing to manage two patches (source -\u003e MSD and MSD -\u003e sink), and that this insert is not controllable / transparent to the application.\n\nThe downside of the overrideAudioSink approach is, if MSD processing is requested, the TvInputService app is not able to control the final destination audio sink (it will be the default MSD -\u003e downstream sink chosen by engine).",
      "parentUuid": "bcee536c_49096216",
      "range": {
        "startLine": 589,
        "startChar": 4,
        "endLine": 589,
        "endChar": 88
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2c94daf_b7641089",
        "filename": "services/audiopolicy/tests/audiopolicymanager_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 589,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2021-02-19T18:13:52Z",
      "side": 1,
      "message": "Thank you very much for the explanation Dean!",
      "parentUuid": "66f1e27c_daf409fd",
      "range": {
        "startLine": 589,
        "startChar": 4,
        "endLine": 589,
        "endChar": 88
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25cd171a_10629f9b",
        "filename": "services/audiopolicy/tests/audiopolicymanager_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 593,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2021-02-18T18:16:10Z",
      "side": 1,
      "message": "In ASSERT_EQ the expected value needs to be the first argument.",
      "range": {
        "startLine": 593,
        "startChar": 14,
        "endLine": 593,
        "endChar": 42
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5400aaa_4aab99e2",
        "filename": "services/audiopolicy/tests/audiopolicymanager_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 593,
      "author": {
        "id": 1133568
      },
      "writtenOn": "2021-02-18T21:37:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "25cd171a_10629f9b",
      "range": {
        "startLine": 593,
        "startChar": 14,
        "endLine": 593,
        "endChar": 42
      },
      "revId": "5102f9fef8fa3f4866c8afba8278e13ffa8a6fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}