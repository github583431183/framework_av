{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "46409bb4_a0ce2d19",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1978000
      },
      "writtenOn": "2023-02-09T08:16:49Z",
      "side": 1,
      "message": "Done",
      "revId": "9189ead585f61c5ec6c0458bd1df212400fc005d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c38ef210_e71448b2",
        "filename": "media/module/extractors/ogg/OggExtractor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2023-02-09T13:30:34Z",
      "side": 1,
      "message": "this skips the final element, so that final element will always be dropped.\n\nfor (i\u003d0; i \u003c size() ; i++)",
      "range": {
        "startLine": 1001,
        "startChar": 27,
        "endLine": 1001,
        "endChar": 59
      },
      "revId": "9189ead585f61c5ec6c0458bd1df212400fc005d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50aa8778_fc9c3dd8",
        "filename": "media/module/extractors/ogg/OggExtractor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1978000
      },
      "writtenOn": "2023-02-10T02:49:33Z",
      "side": 1,
      "message": "The final element always makes accum \u003d\u003d numerator.\nEven for (i\u003d0; i \u003c size(); i++), the final element will always be dropped, just like the original code always drop the first element.\nBut I agree that for (i\u003d0; i \u003c size()-1 ; i++) is a bit confusing.\n\nHow about reserve one more element in maxTOC and push the final element after loop quits?\n\nmaxTOC.setCapacity(kMaxNumTOCEntries + 1);\n\nThis changes mTableOfContents.size from 512 to 513, not power of 2, which seems no effect on binary search.",
      "parentUuid": "c38ef210_e71448b2",
      "range": {
        "startLine": 1001,
        "startChar": 27,
        "endLine": 1001,
        "endChar": 59
      },
      "revId": "9189ead585f61c5ec6c0458bd1df212400fc005d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ef431e1_ccf1430e",
        "filename": "media/module/extractors/ogg/OggExtractor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2023-02-10T15:49:10Z",
      "side": 1,
      "message": "i do not have an issue with that final entry being one of the thinned ones. If that is what the algorithm is supposed to do, then that is fine.\n\nbut i want the  i \u003c size() instead of size()-1  because it highlights that the final entry is dropped by the math, not because we stopped the loop 1 iteration early.",
      "parentUuid": "50aa8778_fc9c3dd8",
      "range": {
        "startLine": 1001,
        "startChar": 27,
        "endLine": 1001,
        "endChar": 59
      },
      "revId": "9189ead585f61c5ec6c0458bd1df212400fc005d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}