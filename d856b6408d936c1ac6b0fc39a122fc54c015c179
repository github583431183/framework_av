{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ac8422a9_9be2fd75",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1024540
      },
      "writtenOn": "2021-04-09T11:22:40Z",
      "side": 1,
      "message": "This is one of the patches mentioned in the meeting \u0027Android OS 360RA support\u0027 between Google and Sony. It would be helpful to handle the CR such as assigning appropriate reviewers.",
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04c8807e_4d1237be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003259
      },
      "writtenOn": "2021-04-09T13:07:38Z",
      "side": 1,
      "message": "Jean-Michel,\n\nwe have already added mime types for mpeg-h to media/java/android/media/MediaFormat.java.\n\nDo we need both native and JAVA definitions?\n",
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1ad0afc_be6e8231",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002682
      },
      "writtenOn": "2021-04-12T14:55:28Z",
      "side": 1,
      "message": "I believe we\u0027ll need them for the NDK too (since MediaCodec has an NDK API) but I don\u0027t know where that goes, adding Marco.",
      "parentUuid": "04c8807e_4d1237be",
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "590e5491_f87b7bf7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001525
      },
      "writtenOn": "2021-04-12T15:32:33Z",
      "side": 1,
      "message": "These don\u0027t appear to be official mime types.\n",
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c1f2884_089c90ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2021-04-12T17:31:10Z",
      "side": 1,
      "message": "As Marco points out these aren\u0027t official audio mime types\n\nhttp://www.iana.org/assignments/media-types/media-types.xhtml\n\nbut I see we have other unofficial audio mime types here to identify audio content.\n\nJean-Michel, do we have any guidance from Fraunhofer?",
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0ed4ca0_5037d78e",
        "filename": "media/libstagefright/foundation/MediaDefs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1001525
      },
      "writtenOn": "2021-04-12T18:24:49Z",
      "side": 1,
      "message": "Do we actually need two separate mime types for this? They appear to be treated the same in the extractor change. If we can get by with just one, then perhaps the official mpeg-H mime type would work: audio/mhas (https://www.iana.org/assignments/media-types/audio/mhas)",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a23a2ec_32ef9b38",
        "filename": "media/libstagefright/foundation/MediaDefs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2021-04-12T18:34:09Z",
      "side": 1,
      "message": "Marco, Eric mentioned to me this internal CL ag/13902806 for reference.",
      "parentUuid": "f0ed4ca0_5037d78e",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5c66841_30a849d2",
        "filename": "media/libstagefright/foundation/MediaDefs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-04-12T22:50:40Z",
      "side": 1,
      "message": "i was looking around to see if i could find any \u0027audio/mha1\u0027 or \u0027audio/mhm1\u0027 references anywhere on the net -- I didn\u0027t find any, but i did find the audio/mhas that marco mentioned.\n\nas a comparison -- i see that we have fourcc entries \u0027hvc1\u0027 and \u0027hev1\u0027 that line up with audio/hevc for a mime type. I was expecting something fitting that pattern.",
      "parentUuid": "6a23a2ec_32ef9b38",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "328c4855_176cf1a4",
        "filename": "media/libstagefright/foundation/MediaDefs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1024540
      },
      "writtenOn": "2021-04-13T08:31:01Z",
      "side": 1,
      "message": "\u0027audio/mhas\u0027 is a mime type for MPEG-H 3D audio stream (MHAS), which is generally transmitted via HDMI. \u0027mhm1\u0027 file format includes MHAS audio packet but \u0027mha1\u0027 file format doesn\u0027t include.\n\nMost mime types are defined to identify containers and may not always identify codecs. So HTML \u0027canPlayType\u0027 API (https://html.spec.whatwg.org/multipage/media.html#dom-navigator-canplaytype) uses \u0027codec\u0027 field along with mime type. In this case, we can describe media type by the string \u0027audio/mp4; codecs\u003d\"mhm1.0x0D\"\u0027 like Chromecast (https://developers.google.com/cast/docs/media#audio_passthrough). \u0027codec\u0027 field is defined in mp4ra (http://mp4ra.org/#/codecs) for mp4 file.\n\nOn the other hand this MIMETYPE in the file is used by app to search suitable MediaCodec by like \u0027MediaCodecInfo.getSupportedType()[0].equalsIgnoreCase(\"audio/eac3)\u0027. So the string of mime type should present codec capability. Therefore I suggested the word \u0027audio/mha1\u0027 and \u0027audio/mhm1\u0027. Could you tell me better idea to present codec capability if you have?",
      "parentUuid": "c5c66841_30a849d2",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a16668b_99a2bf16",
        "filename": "media/libstagefright/foundation/MediaDefs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2021-04-14T00:49:43Z",
      "side": 1,
      "message": "This is under discussion right now with Fraunhofer, perhaps codec name including some profile/level information to ensure codec capability.  I hope to get resolution tomorrow, thanks!",
      "parentUuid": "328c4855_176cf1a4",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2feab69_e6b55dcd",
        "filename": "media/libstagefright/foundation/MediaDefs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2021-04-15T06:43:43Z",
      "side": 1,
      "message": "The discussion with Fraunhofer is that this should be fine.",
      "parentUuid": "7a16668b_99a2bf16",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "d856b6408d936c1ac6b0fc39a122fc54c015c179",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}