{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e9b939ac_ff211a70",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1956242
      },
      "writtenOn": "2023-08-22T21:51:51Z",
      "side": 1,
      "message": "lgtm, thanks Jaideep for the CL!",
      "revId": "f5209843aeddfcd19d1da4c02a1cb715cebae400",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb8ede84_4a40b28b",
        "filename": "media/libaudiohal/impl/EffectConversionHelperAidl.cpp",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2023-08-22T22:21:07Z",
      "side": 1,
      "message": "To me, the message looks somewhat misleading. What has happened is that instead of `volumeToSet`, the effect has applied `appliedVolume`. The message looks as if `volumeToSet` was the previous volume, which is not true. Perhaps, a more correct message would be \"requested to set: %s, actually applied: %s\".",
      "range": {
        "startLine": 370,
        "startChar": 19,
        "endLine": 370,
        "endChar": 49
      },
      "revId": "f5209843aeddfcd19d1da4c02a1cb715cebae400",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed0b2020_b6325cae",
        "filename": "media/libaudiohal/impl/EffectConversionHelperAidl.cpp",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 1630064
      },
      "writtenOn": "2023-08-23T03:26:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb8ede84_4a40b28b",
      "range": {
        "startLine": 370,
        "startChar": 19,
        "endLine": 370,
        "endChar": 49
      },
      "revId": "f5209843aeddfcd19d1da4c02a1cb715cebae400",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1150725d_008d6a43",
        "filename": "media/libaudiohal/impl/EffectConversionHelperAidl.cpp",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2023-08-22T22:21:07Z",
      "side": 1,
      "message": "Why we populate the reply only if the actual volume is different from the value we wanted to set? Shouldn\u0027t we return the actual volume in any case when the operation did not fail?",
      "range": {
        "startLine": 375,
        "startChar": 12,
        "endLine": 375,
        "endChar": 57
      },
      "revId": "f5209843aeddfcd19d1da4c02a1cb715cebae400",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "362a2e22_a6cdc050",
        "filename": "media/libaudiohal/impl/EffectConversionHelperAidl.cpp",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 1630064
      },
      "writtenOn": "2023-08-23T03:26:34Z",
      "side": 1,
      "message": "This is to keep same behavior as that of HIDL.\nIn HIDL, only a few effects those changed the volume, acutally filled the reply. \nSo, for effects not changing the volume, reply was set.\n\nTo match that, we are setting reply only if volume is changed by effect.",
      "parentUuid": "1150725d_008d6a43",
      "range": {
        "startLine": 375,
        "startChar": 12,
        "endLine": 375,
        "endChar": 57
      },
      "revId": "f5209843aeddfcd19d1da4c02a1cb715cebae400",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ec1aa19_6e314ef1",
        "filename": "media/libaudiohal/impl/EffectConversionHelperAidl.cpp",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2023-08-23T16:22:52Z",
      "side": 1,
      "message": "I think we need to agree on what does \"changing the volume\" means. Suppose that the effect had the volume at `0`, and in `requestedVolume` we pass `1`. The effect ignores the request, and thus `appliedVolume` is `0`. Did the volume change? According to `requrestedVolume !\u003d appliedVolume` logic, it did, according to the effect, it didn\u0027t.",
      "parentUuid": "362a2e22_a6cdc050",
      "range": {
        "startLine": 375,
        "startChar": 12,
        "endLine": 375,
        "endChar": 57
      },
      "revId": "f5209843aeddfcd19d1da4c02a1cb715cebae400",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d43fb127_15be11f9",
        "filename": "media/libaudiohal/impl/EffectConversionHelperAidl.cpp",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 1630064
      },
      "writtenOn": "2023-08-24T03:17:03Z",
      "side": 1,
      "message": "I think changing volume is related to effects which expose a capability to control volume, may be overall idea would be if effect controls the volume, then effects passes unity gain back to flinger.\n\nI looked at legacy usage and found this ,\n\n\"\n//  Set and get volume. Used by audio framework to delegate volume control to effect engine.\n//  The effect implementation must set EFFECT_FLAG_VOLUME_IND or EFFECT_FLAG_VOLUME_CTRL flag in\n//  its descriptor to receive this command before every call to process() function\n//  If EFFECT_FLAG_VOLUME_CTRL flag is set in the effect descriptor, the effect engine must return\n//  the volume that should be applied before the effect is processed. The overall volume (the volume\n//  actually applied by the effect engine multiplied by the returned value) should match the value\n//  indicated in the command.\n\"\n\nSo basically, this getVolume needs to be done for effects having EFFECT_FLAG_VOLUME_CTRL always needs to be passed.\n\nmay be we can do like \n\"\nif (common.flags.volume \u003d\u003d Flags::Volume::CTRL) {\n       if (replySize \u0026\u0026 *replySize \u003d\u003d 2 * sizeof(uint32_t) \u0026\u0026 pReplyData) {\n            ALOGI(\"%s requested %s actual applied %s \", __func__,\n                  requestedVolume.toString().c_str(), appliedVolume.toString().c_str());\n            uint32_t vl \u003d (uint32_t)(appliedVolume.left * unityGain);\n            uint32_t vr \u003d (uint32_t)(appliedVolume.right * unityGain);\n            uint32_t vol_ret[2] \u003d {vl, vr};\n            memcpy(pReplyData, vol_ret, sizeof(vol_ret));\n\t\t}\n}\n\"\n\nIf we go by above legacy description then for VOLUME_CTRL effects we always need to return the volume.\n\n\nBut i am not sure if we need to check the volume flag here, will it be taken care by audioflinger itself? What do you think?",
      "parentUuid": "4ec1aa19_6e314ef1",
      "range": {
        "startLine": 375,
        "startChar": 12,
        "endLine": 375,
        "endChar": 57
      },
      "revId": "f5209843aeddfcd19d1da4c02a1cb715cebae400",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05498f1a_896f1e7f",
        "filename": "media/libaudiohal/impl/EffectConversionHelperAidl.cpp",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2023-08-25T18:23:23Z",
      "side": 1,
      "message": "Yes, the audioflinger only sends the \"set volume\" command for effects that declare the VOLUME_CTRL flag:\n\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/av/services/audioflinger/Effects.cpp;l\u003d994;drc\u003d7e551a388c1344dbe77e6775d0ac6f947e005249\n\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/av/services/audioflinger/Effects.cpp;l\u003d2520;drc\u003d7e551a388c1344dbe77e6775d0ac6f947e005249\n\nThus, no need to check the flag in the effect.",
      "parentUuid": "d43fb127_15be11f9",
      "range": {
        "startLine": 375,
        "startChar": 12,
        "endLine": 375,
        "endChar": 57
      },
      "revId": "f5209843aeddfcd19d1da4c02a1cb715cebae400",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7e24081_85bd279d",
        "filename": "media/libaudiohal/impl/EffectConversionHelperAidl.cpp",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 1630064
      },
      "writtenOn": "2023-08-30T03:42:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05498f1a_896f1e7f",
      "range": {
        "startLine": 375,
        "startChar": 12,
        "endLine": 375,
        "endChar": 57
      },
      "revId": "f5209843aeddfcd19d1da4c02a1cb715cebae400",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}