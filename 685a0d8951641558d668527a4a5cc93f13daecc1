{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0a9c1d67_e33e3f0d",
        "filename": "media/libstagefright/MPEG4Writer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 492,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-10-12T22:34:01Z",
      "side": 1,
      "message": "i was thinking\n\nMPEG4Writer *MPEG4Writer::create(int fd) {\n    validate fd\n    if (invalid) return nullptr;\n    p \u003d new Mpeg4Writer(fd);\n    return p;\n}\n\nand make the constructor private, so that the only way to get a writer is\nwith this new create(fd) method.",
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aee056ee_2bb9ab34",
        "filename": "media/libstagefright/MPEG4Writer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 492,
      "author": {
        "id": 1576211
      },
      "writtenOn": "2021-10-13T13:53:13Z",
      "side": 1,
      "message": "Seems like a good approach to me. Please let\u0027s add documentation to the new method. I don\u0027t know how it works in Android C++, but the contents of the documentation would look something like:\n\nIf the given file descriptor is opened using an MPEG4Writer-compliant mode, returns a new MPEG4Writer instance that writes contents using the given file descriptor. Else, returns nullptr.",
      "parentUuid": "0a9c1d67_e33e3f0d",
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c3225bc_c7ebc983",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-10-12T22:34:01Z",
      "side": 1,
      "message": "this isn\u0027t the approach i wanted to take.\nNote that it can still be bypassed -- people can call \u0027new MPEG4Writer()\u0027\ndirectly without this, so we haven\u0027t prevented it from going bad.",
      "range": {
        "startLine": 49,
        "startChar": 23,
        "endLine": 49,
        "endChar": 35
      },
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d4de72a_7cb616fc",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1576211
      },
      "writtenOn": "2021-10-13T13:53:13Z",
      "side": 1,
      "message": "Is the proposal making the constructor private? Would you mind spelling out the suggested changes in this comment, Ray?",
      "parentUuid": "2c3225bc_c7ebc983",
      "range": {
        "startLine": 49,
        "startChar": 23,
        "endLine": 49,
        "endChar": 35
      },
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "102a6561_e5962ba2",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-10-13T14:29:09Z",
      "side": 1,
      "message": "my suggestion was that we do these writer-dependent checks down in the writers themselves.\n\nI wanted to replace \"new MPEG4Writer()\" with a (static) Mpeg4Writer::create()\nthat validated parameters and instantiated the object if they pass.  I would\nthen make MPEG4Writer\u0027s constructor private.  [repeat for all of the Writers]",
      "parentUuid": "8d4de72a_7cb616fc",
      "range": {
        "startLine": 49,
        "startChar": 23,
        "endLine": 49,
        "endChar": 35
      },
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f088763c_658764c2",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-10-12T22:34:01Z",
      "side": 1,
      "message": "note that if we have an else {} clause here\nwe are at a point where we know we don\u0027t have a valid format.\nthis means that we can delete lines 67..81 and replace them with\nelse { ALOGE(\"unhandled format\"); return nullptr;}\nright here.",
      "range": {
        "startLine": 81,
        "startChar": 3,
        "endLine": 81,
        "endChar": 5
      },
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b395536d_6071db55",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1202200
      },
      "writtenOn": "2021-10-13T13:22:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f088763c_658764c2",
      "range": {
        "startLine": 81,
        "startChar": 3,
        "endLine": 81,
        "endChar": 5
      },
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d087dc1d_9597c0ad",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-10-12T22:34:01Z",
      "side": 1,
      "message": "in my world, this gets replaced with\n\nmWriter \u003d MPEG4Writer::create(fd);\n\nwhich does the parameter validation (e.g. fd is appropriately writeable, other writers will look at seekable, r/w [not just write], etc).",
      "range": {
        "startLine": 99,
        "startChar": 7,
        "endLine": 99,
        "endChar": 38
      },
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc393c74_8ace9e3b",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2021-10-12T22:52:09Z",
      "side": 1,
      "message": "Ray, \nSince MediaMuxer::MediaMuxer() can\u0027t throw an exception, adding a MPEG4Writer::create(fd) to return null won\u0027t help right?\n\nThis was the reason we added a static create to MediaMuxer class and a validateArguments method to individual writers.",
      "parentUuid": "d087dc1d_9597c0ad",
      "range": {
        "startLine": 99,
        "startChar": 7,
        "endLine": 99,
        "endChar": 38
      },
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d71295fd_1e25adb2",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-10-13T14:29:09Z",
      "side": 1,
      "message": "even before...   new MediaMuxer always returned an instance.\nbut if the parameters were bad, the internal field \"mWriter\" would be\nnull and the muxer\u0027s state would remain uninitialized.",
      "parentUuid": "cc393c74_8ace9e3b",
      "range": {
        "startLine": 99,
        "startChar": 7,
        "endLine": 99,
        "endChar": 38
      },
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59a8c99b_4804acb4",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2021-10-13T16:12:37Z",
      "side": 1,
      "message": "Ray,\n\nObjective targeted with this CL in frameworks/av and \nhttps://android-review.googlesource.com/c/platform/frameworks/base/+/1842097 in frameworks/base\n\nWhen fd is invalid\n- AMediaMuxer_new in NDK api needs to return nullptr\n- MediaMuxer() in SDK api throws an exception \n\nIn order to do the above, setting the state as uninitialized won\u0027t suffice.\nWith that approach, muxer would only return an error in later calls, which isn\u0027t the right thing to do as per the API.\n\nOther objectives (based on the review comments in these CLs)\n- not to duplicate error checks in frameworks/base and frameworks/av\n- to keep webm specific checks to webm writer\n\nSo in order to achieve the above objectives (and given that native code is compiled with -fno-exceptions)\n\n- we need a static create() method for MediaMuxer class which can validate the arguments before calling new MediaMuxer(). In case of errors it will return nullptr and calling functions can appropriately return null in NDK and throw an exception in SDK path.\n- we also need a way to validate arguments in webm writer.\nSince individual writers are instantiated in MediaMuxer\u0027s constructor, adding a static create() to individual writers will not help as we won\u0027t be able to return null from MediaMuxer()\u0027s constructor when the individual writer\u0027s create() returns null.\n\nIf we are missing something in the objectives listed here, please let us know and we will accordingly change the CLs.\nThanks.",
      "parentUuid": "d71295fd_1e25adb2",
      "range": {
        "startLine": 99,
        "startChar": 7,
        "endLine": 99,
        "endChar": 38
      },
      "revId": "685a0d8951641558d668527a4a5cc93f13daecc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}