{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "21f0137c_1d78a78d",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-10-29T04:17:51Z",
      "side": 1,
      "message": "can we prep an additional CL\nthat restructures the two decode fuzzers in this directory the same\nway -- with a cc_defaults and two simpler cc_fuzz clauses.",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 74,
        "endChar": 13
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b336cd3a_6b72c8ff",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1619864
      },
      "writtenOn": "2020-10-29T12:49:32Z",
      "side": 1,
      "message": "Hi Ray, We have added a new CL to restructure the two decoder fuzzers - https://android-review.googlesource.com/c/platform/frameworks/av/+/1479638",
      "parentUuid": "21f0137c_1d78a78d",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 74,
        "endChar": 13
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e98f69e6_e38b29d6",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/mpeg4_h263_enc_fuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-10-29T04:17:51Z",
      "side": 1,
      "message": "from a fuzzer standpoint, is it going to fill data[IDX_ENABLE_RVLC]\nwith all 0..255 values that it\u0027ll hold?\n\nthat would seem to be 128x as many test setups as we need to cover all the paths this\nenabled.  How does the fuzzer know that only values 0 and 1 are worth testing?\n\n[that pattern follows for a number of other field settings here...",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 80
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c2375a0_42c3f430",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/mpeg4_h263_enc_fuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2020-10-29T17:06:13Z",
      "side": 1,
      "message": "Ray,\nFuzzer starts with a seed corpus and keeps mutating this to improve coverage (libfuzzer is coverage guided). Any mutation that improves the coverage, will be retained and further mutated, anything that doesn\u0027t is discarded.\nwe are using the bytes in data, to verify various combinations of configuration parameters. \nOnce this runs for sometime, we will look at resulting coverage and then refine these if required.",
      "parentUuid": "e98f69e6_e38b29d6",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 80
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1263a651_4ec551dd",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/mpeg4_h263_enc_fuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-11-05T03:34:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9c2375a0_42c3f430",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 80
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c855bdb3_8def325f",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/mpeg4_h263_enc_fuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-10-29T04:17:51Z",
      "side": 1,
      "message": "both sides are the same source code; this doesn\u0027t make sense as an #if clause.",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 117,
        "endChar": 6
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc7dca2f_c09644e7",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/mpeg4_h263_enc_fuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1619864
      },
      "writtenOn": "2020-10-29T12:49:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c855bdb3_8def325f",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 117,
        "endChar": 6
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8e5206e_fff832c2",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/mpeg4_h263_enc_fuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-10-29T04:17:51Z",
      "side": 1,
      "message": "this comparison should be done with bytesConsumed instead of size.",
      "range": {
        "startLine": 154,
        "startChar": 12,
        "endLine": 154,
        "endChar": 16
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2176a9c_ec8c9828",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/mpeg4_h263_enc_fuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1619864
      },
      "writtenOn": "2020-10-29T12:49:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8e5206e_fff832c2",
      "range": {
        "startLine": 154,
        "startChar": 12,
        "endLine": 154,
        "endChar": 16
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7299087_4692b24c",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/mpeg4_h263_enc_fuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-10-29T04:17:51Z",
      "side": 1,
      "message": "we should only pad/fill the bytes beyond what we\u0027re filling from the data source;\n\nmemcpy(inputBuffer, data, bytesConsumed);\nif (bytesConsumed \u003c sizeof(inputBuffer))\n    memset(inputBuffer+bytesConsumed, data[0], sizeof(inputBuffer)-bytesConsumed);",
      "range": {
        "startLine": 155,
        "startChar": 48,
        "endLine": 155,
        "endChar": 59
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9cc88b8_2b17d681",
        "filename": "media/libstagefright/codecs/m4v_h263/fuzzer/mpeg4_h263_enc_fuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 1619864
      },
      "writtenOn": "2020-10-29T12:49:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7299087_4692b24c",
      "range": {
        "startLine": 155,
        "startChar": 48,
        "endLine": 155,
        "endChar": 59
      },
      "revId": "a9cfc1bc4cfbe8c4b03d126615416ea3651ecb0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}