{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "322e49f8_96200045",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2024-05-10T23:51:36Z",
      "side": 1,
      "message": "This is just a cleanup refactor, no intentional behavior change.",
      "revId": "2b635f805fdeda997f931a0219baebc2845c0e3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b980cbc9_d6036b5d",
        "filename": "media/libaudiohal/impl/StreamHalHidl.cpp",
        "patchSetId": 1
      },
      "lineNbr": 620,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2024-05-11T00:49:24Z",
      "side": 1,
      "message": "perhaps temporarily log if there is a large retrograde until we are sure this works?",
      "range": {
        "startLine": 620,
        "startChar": 0,
        "endLine": 620,
        "endChar": 5
      },
      "fixSuggestions": [
        {
          "fixId": "628f7b69_5134f340",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "media/libaudiohal/impl/StreamHalHidl.cpp",
              "range": {
                "startLine": 618,
                "startChar": 0,
                "endLine": 618,
                "endChar": 0
              },
              "replacement": "        ALOGW(\"Retrograde motion of %lld frames\", -deltaHalPosition);\n"
            }
          ]
        }
      ],
      "revId": "2b635f805fdeda997f931a0219baebc2845c0e3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7afc5ba0_f3d56723",
        "filename": "media/libaudiohal/impl/StreamHalHidl.cpp",
        "patchSetId": 1
      },
      "lineNbr": 620,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2024-05-13T20:34:46Z",
      "side": 1,
      "message": "Done. Note that since `deltaHalPosition` is `int32_t`, the format is `\"%\" PRId32`.",
      "parentUuid": "b980cbc9_d6036b5d",
      "range": {
        "startLine": 620,
        "startChar": 0,
        "endLine": 620,
        "endChar": 5
      },
      "revId": "2b635f805fdeda997f931a0219baebc2845c0e3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f465f67f_b54eb5cb",
        "filename": "media/libaudiohal/impl/StreamHalHidl.cpp",
        "patchSetId": 1
      },
      "lineNbr": 718,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2024-05-11T00:49:24Z",
      "side": 1,
      "message": "should verify no race conditions here, since the behavior may be modified slightly.",
      "range": {
        "startLine": 718,
        "startChar": 0,
        "endLine": 718,
        "endChar": 29
      },
      "revId": "2b635f805fdeda997f931a0219baebc2845c0e3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49683c14_8d77e0f8",
        "filename": "media/libaudiohal/impl/StreamHalHidl.cpp",
        "patchSetId": 1
      },
      "lineNbr": 718,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2024-05-13T20:34:46Z",
      "side": 1,
      "message": "Good point. I was expecting these methods of `StreamHalInterface` to be only called by `AudioStreamIn/Out`, however it seems that there are some direct usages for `standby`: `MmapThread::standby` and `::threadLoop_standby` call `StreamHalInterface::standby`. `MmapThread::standby` does this under `ThreadBase::mutex`, while `threadLoop_standby` requires `ThreadBase_ThreadLoop` mutex which I see is taken while `TB:mutex` is excluded (https://cs.android.com/android/platform/superproject/main/+/main:frameworks/av/services/audioflinger/Threads.h;l\u003d2234;drc\u003d8c5aa6af03b4fac43355070d143cb5268cf24e11). However, `getRenderPosition` also excludes `TB::mutex`: https://cs.android.com/android/platform/superproject/main/+/main:frameworks/av/services/audioflinger/Threads.h;l\u003d1060;drc\u003d8c5aa6af03b4fac43355070d143cb5268cf24e11.\n\nI have a suspicion that there were race conditions in `AudioStreamOut` already ðŸ˜Š\nI suppose, what we want to achieve is to update `mRenderPosition` and `mExpectRetrograde` atomically. Since `mRenderPosition` is already 64-bit, together they make a unit too large to change atomically, so it seems that we need to use a mutex. If we only perform computations while it\u0027s being held, not making any calls, I suppose it should not affect calling code much.",
      "parentUuid": "f465f67f_b54eb5cb",
      "range": {
        "startLine": 718,
        "startChar": 0,
        "endLine": 718,
        "endChar": 29
      },
      "revId": "2b635f805fdeda997f931a0219baebc2845c0e3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}