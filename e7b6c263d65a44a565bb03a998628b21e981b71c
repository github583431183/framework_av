{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d7942130_c7647a85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2021-08-14T15:23:47Z",
      "side": 1,
      "message": "Sungtak,\nCan you please submit this?\nThanks.",
      "revId": "e7b6c263d65a44a565bb03a998628b21e981b71c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "262fef13_4f8d49b4",
        "filename": "media/codec2/hidl/1.0/vts/functional/audio/VtsHalMediaC2V1_0TargetAudioEncTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-09-17T20:04:09Z",
      "side": 1,
      "message": "we haven\u0027t validated that queried.size() is \u003e offset + sizeof(uint32_t)\nso we have a potential OOB read here. i think we need to address that.\n\nI also worry about the sort of casting we\u0027re doing here. it\u0027s too easy to generate a mis-aligned address with this approach. this case works because sizeof(C2Param) is going to be at least uint32_t aligned because it contains one of those.\n\ni\u0027d have thought we would have some class derived from C2Param that would have those extra fields included in it.",
      "range": {
        "startLine": 310,
        "startChar": 22,
        "endLine": 310,
        "endChar": 61
      },
      "revId": "e7b6c263d65a44a565bb03a998628b21e981b71c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d35acf8a_9b770a34",
        "filename": "media/codec2/hidl/1.0/vts/functional/audio/VtsHalMediaC2V1_0TargetAudioEncTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2021-09-17T22:40:57Z",
      "side": 1,
      "message": "Regarding queried.size() is \u003e offset + sizeof(uint32_t)\n\n\"queried\" is a vector and size() will be filled with number of parameters \nreturned. In this case it can be 0 when query() fails and 1 when it succeeds.\nqueried.size() \u003e\u003d offset + sizeof(uint32) isn\u0027t a correct check.\nparam is accessed only when vector is valid and hence there is no OOB read.\n\nRegarding the access with typecast,\nAgreed. I will upload a CL that will update all such occurrences.",
      "parentUuid": "262fef13_4f8d49b4",
      "range": {
        "startLine": 310,
        "startChar": 22,
        "endLine": 310,
        "endChar": 61
      },
      "revId": "e7b6c263d65a44a565bb03a998628b21e981b71c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aed3391c_2f37d89f",
        "filename": "media/codec2/hidl/1.0/vts/functional/audio/VtsHalMediaC2V1_0TargetAudioEncTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 1156740
      },
      "writtenOn": "2021-08-13T02:07:44Z",
      "side": 1,
      "message": "Is this line covers the case of maxInputSize being 0 from L310?\n(I don\u0027t know whether this can happen.)",
      "revId": "e7b6c263d65a44a565bb03a998628b21e981b71c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0d5873e_2fee5bb7",
        "filename": "media/codec2/hidl/1.0/vts/functional/audio/VtsHalMediaC2V1_0TargetAudioEncTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2021-08-13T02:25:34Z",
      "side": 1,
      "message": "yes. If line 310 sets maxInputSize to 0 or if C2StreamAudioFrameSizeInfo isn\u0027t supported,\nwe fall back to old approach.\nCurrent s/w codecs do not support C2StreamAudioFrameSizeInfo and the following call in 314 gets maxInputSize",
      "parentUuid": "aed3391c_2f37d89f",
      "revId": "e7b6c263d65a44a565bb03a998628b21e981b71c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "810513ad_dd501265",
        "filename": "media/codec2/hidl/1.0/vts/functional/audio/VtsHalMediaC2V1_0TargetAudioEncTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 316,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-09-17T20:04:09Z",
      "side": 1,
      "message": "this particular construct... will return C2_OK in the event that \nwe successfully query, but it was empty.\nand we won\u0027t have put a value into *samplesPerFrame -- so we\u0027ll have returned\nOK without having updated the value. This needs to be reworked.\n[and since this is a cherry pick from what is already in master -- the copy that merged to master needs to be reworked]\n\nand I think it needs to be queried.size() \u003c offset + sizeof(uint32_t) that\nis the failing case, not queried.size \u003d\u003d 0.",
      "range": {
        "startLine": 316,
        "startChar": 9,
        "endLine": 316,
        "endChar": 64
      },
      "revId": "e7b6c263d65a44a565bb03a998628b21e981b71c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2f73b02_d52ea041",
        "filename": "media/codec2/hidl/1.0/vts/functional/audio/VtsHalMediaC2V1_0TargetAudioEncTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 316,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2021-09-17T22:40:57Z",
      "side": 1,
      "message": "will update the checks to ensure that c2err is C2_OK and queried.size() is 1.\nInstead of if(), will change these to ASSERT_EQ() so that test would fail instead of returning C2_OK in case of empty \"queried\".\n\nfor queried.size(), please refer to response to previous comment on line 310.",
      "parentUuid": "810513ad_dd501265",
      "range": {
        "startLine": 316,
        "startChar": 9,
        "endLine": 316,
        "endChar": 64
      },
      "revId": "e7b6c263d65a44a565bb03a998628b21e981b71c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}