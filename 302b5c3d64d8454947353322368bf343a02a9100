{
  "comments": [
    {
      "key": {
        "uuid": "8037e2be_92dbb32b",
        "filename": "media/libstagefright/tests/ESDS/AndroidTest.xml",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-14T05:24:18Z",
      "side": 1,
      "message": "let\u0027s include a version number from day 1.\nsince this is new, it would be \"ESDSTestRes-1.0.zip",
      "range": {
        "startLine": 22,
        "startChar": 101,
        "endLine": 22,
        "endChar": 108
      },
      "revId": "302b5c3d64d8454947353322368bf343a02a9100",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06d283e4_5a14254e",
        "filename": "media/libstagefright/tests/ESDS/AndroidTest.xml",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1561924
      },
      "writtenOn": "2020-05-15T17:29:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8037e2be_92dbb32b",
      "range": {
        "startLine": 22,
        "startChar": 101,
        "endLine": 22,
        "endChar": 108
      },
      "revId": "302b5c3d64d8454947353322368bf343a02a9100",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aec3189b_4ff5c032",
        "filename": "media/libstagefright/tests/ESDS/ESDSTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-14T05:24:18Z",
      "side": 1,
      "message": "I think we should clear mESDSData and mESDSSize when we get here.\n\n-- otherwise line 108 will cause a leak when it updates mESDSData\n-- otherwise other routines might use a stale value of mESDSData/mESDSSize",
      "revId": "302b5c3d64d8454947353322368bf343a02a9100",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6687605d_35f49f4d",
        "filename": "media/libstagefright/tests/ESDS/ESDSTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1561924
      },
      "writtenOn": "2020-05-15T17:29:45Z",
      "side": 1,
      "message": "test is not allocating memory on mESDSData handle, added clear call to data source in destructor. clear call on track metaData doesn\u0027t make the esds data invalid. cannot call free on void*",
      "parentUuid": "aec3189b_4ff5c032",
      "revId": "302b5c3d64d8454947353322368bf343a02a9100",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a88623cd_d890c813",
        "filename": "media/libstagefright/tests/ESDS/ESDSTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1561924
      },
      "writtenOn": "2020-05-25T05:21:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6687605d_35f49f4d",
      "revId": "302b5c3d64d8454947353322368bf343a02a9100",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f2ef684_205976e5",
        "filename": "media/libstagefright/tests/ESDS/ESDSTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-14T05:24:18Z",
      "side": 1,
      "message": "this code doesn\u0027t guarantee this.\nsince we do not set the content of malloc(), it could have been randomly set with\ndata that happens to be valid ESDS data.\n\nTo fix this -- you need to set the content of the invalidData buffer.",
      "range": {
        "startLine": 125,
        "startChar": 13,
        "endLine": 126,
        "endChar": 1
      },
      "revId": "302b5c3d64d8454947353322368bf343a02a9100",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5234ab02_1e8c30a4",
        "filename": "media/libstagefright/tests/ESDS/ESDSTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1561924
      },
      "writtenOn": "2020-05-15T17:29:45Z",
      "side": 1,
      "message": "calloc intialises to zero",
      "parentUuid": "1f2ef684_205976e5",
      "range": {
        "startLine": 125,
        "startChar": 13,
        "endLine": 126,
        "endChar": 1
      },
      "revId": "302b5c3d64d8454947353322368bf343a02a9100",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4f8091a_6bcc0c16",
        "filename": "media/libstagefright/tests/ESDS/ESDSTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-14T05:24:18Z",
      "side": 1,
      "message": "this is not guaranteed to return non-null.\n\nif you want to force a test with a nonzero pointer:\n\ninvalidData \u003d malloc(1);\nESDS esds_zero(invalidData, 0);\n\n\nthis does also raise the question -- should we be testing\nESDS esds_null( NULL, 0);\n??",
      "range": {
        "startLine": 129,
        "startChar": 9,
        "endLine": 129,
        "endChar": 34
      },
      "revId": "302b5c3d64d8454947353322368bf343a02a9100",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b4ab55b_c40a2716",
        "filename": "media/libstagefright/tests/ESDS/ESDSTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1561924
      },
      "writtenOn": "2020-05-15T17:29:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4f8091a_6bcc0c16",
      "range": {
        "startLine": 129,
        "startChar": 9,
        "endLine": 129,
        "endChar": 34
      },
      "revId": "302b5c3d64d8454947353322368bf343a02a9100",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}