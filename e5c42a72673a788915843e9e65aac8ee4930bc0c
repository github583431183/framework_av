{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1e636bfc_6ead3cca",
        "filename": "media/libaudiohal/impl/StreamHalAidl.cpp",
        "patchSetId": 1
      },
      "lineNbr": 340,
      "author": {
        "id": 1763691
      },
      "writtenOn": "2023-02-24T03:33:03Z",
      "side": 1,
      "message": "I did some changes to make the offload playback work. \n\n1. In the IDLE state, when the HAL gets a burst command, the state machine should go to either the ACTIVE or the TRANSFERRING state. I think in this scenario it should go to the ACTIVE state. \n\n2. The argument reply might be a nullptr. Using `state \u003d getState()` to get the state.\n\n```\n            auto state \u003d getState();\n            if (state \u003d\u003d StreamDescriptor::State::IDLE) {\n                if (status_t status \u003d\n                        sendCommand(makeHalCommand\u003cHalCommand::Tag::burst\u003e(0), reply);\n                        status !\u003d OK) {\n                    return status;\n                }\n                state \u003d getState();\n                if (state !\u003d StreamDescriptor::State::ACTIVE) {\n                    ALOGE(\"%s: unexpected stream state: %s (expected ACTIVE)\",\n                            __func__, toString(state).c_str());\n                    return INVALID_OPERATION;\n                }\n            }\n            return OK;\n```",
      "range": {
        "startLine": 327,
        "startChar": 12,
        "endLine": 340,
        "endChar": 13
      },
      "revId": "e5c42a72673a788915843e9e65aac8ee4930bc0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}