{
  "comments": [
    {
      "key": {
        "uuid": "d7f796f5_bfbb0198",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2020-02-04T18:18:35Z",
      "side": 1,
      "message": "ExtractorUnitTest: Enable midi tests\n\nAdd midi file for extract tests\nDisable seek test for midi",
      "revId": "41865fc66819e963630b68295dda9221678e7385",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad30ec78_a894f2c1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1202200
      },
      "writtenOn": "2020-02-05T12:17:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7f796f5_bfbb0198",
      "revId": "41865fc66819e963630b68295dda9221678e7385",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddbef3f9_4304d572",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 388,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-02-04T18:36:21Z",
      "side": 1,
      "message": "reading this comment....  \n\nit sounds like those extractors would function correctly, but some things like \"sync_nearest\" have an easy answer out. what i\u0027m worried about here is that this \u0027skip them\u0027 is based on particulars of our current implementation of those extractors.\n\nunless the specs say that the seek() operations do not work for flac/wav/midi, I think we want to run those through this test.",
      "range": {
        "startLine": 383,
        "startChar": 3,
        "endLine": 388,
        "endChar": 0
      },
      "revId": "41865fc66819e963630b68295dda9221678e7385",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4e8e198_bc22de68",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 388,
      "author": {
        "id": 1202200
      },
      "writtenOn": "2020-02-05T12:17:54Z",
      "side": 1,
      "message": "Flac, Midi and Wav extractors return raw output. Hence any point can be treated as sync point.\nThe purpose of this test it to validate the seek-ability of the extractors. Since for raw output all points are seekable, hence we are skipping the test.\nWe can consider adding a test to test the seek for these three extractors specifically.",
      "parentUuid": "ddbef3f9_4304d572",
      "range": {
        "startLine": 383,
        "startChar": 3,
        "endLine": 388,
        "endChar": 0
      },
      "revId": "41865fc66819e963630b68295dda9221678e7385",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da6a1235_66dec2e5",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 388,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2020-02-05T18:23:51Z",
      "side": 1,
      "message": "Filed a bug to track this b/148948209.\nWe may need to look at all audio codecs and see how many of them need to support seek to any random point.",
      "parentUuid": "a4e8e198_bc22de68",
      "range": {
        "startLine": 383,
        "startChar": 3,
        "endLine": 388,
        "endChar": 0
      },
      "revId": "41865fc66819e963630b68295dda9221678e7385",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "179c3a6a_63704b33",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 388,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-02-05T19:07:29Z",
      "side": 1,
      "message": "I still believe that we need to flac/wav/midi through this test.\n\nit does seem that getseekablepoints() will do the right thing because, for example, the flac extractor lists all frames as sync frames -- so this will work just exactly as we would want.(wav and midi appear to do that also).\n\nthere may be additional tests that we want to do for the extractors that return raw data, but i don\u0027t see that those particular extractors should be excluded here.\n\n(and per harish\u0027s comment -- the test there would seem to be that for one of these codecs that must support seeking to every frame, that the # seekpoints generated in getseekablepoints() needs to match the number of frames/buffers in the file.\n\nif those need to seek within a frame, instead of a frame boundary, those additional tests will have to do something differently.",
      "parentUuid": "da6a1235_66dec2e5",
      "range": {
        "startLine": 383,
        "startChar": 3,
        "endLine": 388,
        "endChar": 0
      },
      "revId": "41865fc66819e963630b68295dda9221678e7385",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e133bdff_a91cb092",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 388,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2020-02-05T19:17:29Z",
      "side": 1,
      "message": "Ray,\nSure. We will look at how much of the current seek test applies to these cases and if any changes are needed to ensure that are no failures and what additional tests are needed for these cases and upload follow up CLs as part of the new bug.\nThis helps unblock current CL and enables midi testing.",
      "parentUuid": "179c3a6a_63704b33",
      "range": {
        "startLine": 383,
        "startChar": 3,
        "endLine": 388,
        "endChar": 0
      },
      "revId": "41865fc66819e963630b68295dda9221678e7385",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9caec38b_fef939c6",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 388,
      "author": {
        "id": 1202200
      },
      "writtenOn": "2020-02-06T13:19:52Z",
      "side": 1,
      "message": "Done\nAdded a new CL to address this issue",
      "parentUuid": "e133bdff_a91cb092",
      "range": {
        "startLine": 383,
        "startChar": 3,
        "endLine": 388,
        "endChar": 0
      },
      "revId": "41865fc66819e963630b68295dda9221678e7385",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cf72031_3fb75f89",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 388,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-02-21T21:18:46Z",
      "side": 1,
      "message": "should include that CL number here.",
      "parentUuid": "9caec38b_fef939c6",
      "range": {
        "startLine": 383,
        "startChar": 3,
        "endLine": 388,
        "endChar": 0
      },
      "revId": "41865fc66819e963630b68295dda9221678e7385",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}