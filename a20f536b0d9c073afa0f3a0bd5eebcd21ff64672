{
  "comments": [
    {
      "key": {
        "uuid": "ff345fe3_186f68e6",
        "filename": "media/tests/benchmark/src/native/common/Timer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 29,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2019-09-05T03:48:46Z",
      "side": 1,
      "message": "this description doesn\u0027t say anything about the colon that sits between the two strings.",
      "range": {
        "startLine": 29,
        "startChar": 25,
        "endLine": 29,
        "endChar": 37
      },
      "revId": "a20f536b0d9c073afa0f3a0bd5eebcd21ff64672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f45ccdc_112c9355",
        "filename": "media/tests/benchmark/src/native/common/Timer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 29,
      "author": {
        "id": 1202200
      },
      "writtenOn": "2019-09-05T04:37:08Z",
      "side": 1,
      "message": "The description has changed based on updated function signature.\n\nDone",
      "parentUuid": "ff345fe3_186f68e6",
      "range": {
        "startLine": 29,
        "startChar": 25,
        "endLine": 29,
        "endChar": 37
      },
      "revId": "a20f536b0d9c073afa0f3a0bd5eebcd21ff64672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea9b86a7_40000f88",
        "filename": "media/tests/benchmark/src/native/common/Timer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 59,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2019-09-05T03:48:46Z",
      "side": 1,
      "message": "should be the variable inputReference, not the literal string \"inputReference\"",
      "range": {
        "startLine": 59,
        "startChar": 20,
        "endLine": 59,
        "endChar": 37
      },
      "revId": "a20f536b0d9c073afa0f3a0bd5eebcd21ff64672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17cd303d_a3a60625",
        "filename": "media/tests/benchmark/src/native/common/Timer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 59,
      "author": {
        "id": 1202200
      },
      "writtenOn": "2019-09-05T04:37:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea9b86a7_40000f88",
      "range": {
        "startLine": 59,
        "startChar": 20,
        "endLine": 59,
        "endChar": 37
      },
      "revId": "a20f536b0d9c073afa0f3a0bd5eebcd21ff64672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96a31251_69f11d0d",
        "filename": "media/tests/benchmark/src/native/common/Timer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 63,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2019-09-05T03:48:46Z",
      "side": 1,
      "message": "we\u0027ll get interesting output if the string is \":\" or \"whatever:\" or \":whatever\".\n\nmaybe a flow like:\n\nstd::string operation, reference;\nindex \u003d inputReference.find(\":\");\nif (index \u003c 0)\n    reference \u003d inputReference;\nelse {\n    operation \u003d inputReference.substr(0,index);\n    reference \u003d inputReference.substr(index+1);\n}\nif (operation.length() \u003d\u003d 0 ) operation \u003d \"process\";\nif (reference.length() \u003d\u003d 0 ) reference \u003d \"inputdata\";",
      "revId": "a20f536b0d9c073afa0f3a0bd5eebcd21ff64672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ecbbf6d_29afa345",
        "filename": "media/tests/benchmark/src/native/common/Timer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 63,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2019-09-05T04:00:56Z",
      "side": 1,
      "message": "I think this is getting too complicated.\nShould we just pass two different arguments\nTimer::dumpStatistics(std::string operation, std::string inputReference, int64_t duarationUs)?\nThis will keep it simple and force the calling function to pass operation and inputReference?",
      "parentUuid": "96a31251_69f11d0d",
      "revId": "a20f536b0d9c073afa0f3a0bd5eebcd21ff64672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cb36273_78ef14b9",
        "filename": "media/tests/benchmark/src/native/common/Timer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 63,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2019-09-05T04:07:36Z",
      "side": 1,
      "message": "passing in the strings that way would be absolutely fine...\nand simpler.\nabsolutely ok with reworking it that way.",
      "parentUuid": "9ecbbf6d_29afa345",
      "revId": "a20f536b0d9c073afa0f3a0bd5eebcd21ff64672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abe879a8_306cb616",
        "filename": "media/tests/benchmark/src/native/common/Timer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 63,
      "author": {
        "id": 1202200
      },
      "writtenOn": "2019-09-05T04:37:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0cb36273_78ef14b9",
      "revId": "a20f536b0d9c073afa0f3a0bd5eebcd21ff64672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}