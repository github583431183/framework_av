{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2b966eed_68869469",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1281351
      },
      "writtenOn": "2021-01-25T09:06:51Z",
      "side": 1,
      "message": "Hi Andy,\n\nThanks for the suggestions. I\u0027ve added TODO comments accordingly to describe the current limitations. I will defer improvements to a subsequent CL.\n\nThanks, Michael",
      "revId": "baa4fa9a7e4c63c8be10dd8a7bf182eb90d78d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2613ef80_177e867a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2021-01-25T15:27:05Z",
      "side": 1,
      "message": "Sounds good, thanks!",
      "revId": "baa4fa9a7e4c63c8be10dd8a7bf182eb90d78d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "267afe82_81c90030",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2021-01-25T16:43:59Z",
      "side": 1,
      "message": "there is an automerger conflict, so we will need to manually cherry pick this to our internal branch.",
      "revId": "baa4fa9a7e4c63c8be10dd8a7bf182eb90d78d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a866a619_c9dd98ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2021-01-26T00:50:54Z",
      "side": 1,
      "message": "No worries, I will do that. Thanks again Michael for working on this!",
      "parentUuid": "267afe82_81c90030",
      "revId": "baa4fa9a7e4c63c8be10dd8a7bf182eb90d78d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8488ddaa_04dac5c8",
        "filename": "services/audiopolicy/managerdefault/AudioPolicyManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1056,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2021-01-26T01:17:22Z",
      "side": 1,
      "message": "It seems that the outcome here may vary in the case of multiple MSD patches. I\u0027m getting a failure of these two tests while trying to apply this patch downstream:\n\nMsdAudioPatchCount/AudioPolicyManagerTestMsd#GetOutputForAttrEncodedRoutesToMsd/dual\nMsdAudioPatchCount/AudioPolicyManagerTestMsd#GetOutputForAttrEncodedPlusPcmRoutesToMsd/dual\n\nSometimes it\u0027s only GetOutputForAttrEncodedPlusPcmRoutesToMsd/dual. The failure is when the test compares the actual output handle against the expected one:\n\n    getOutputForAttr(\u0026selectedDeviceId,\n            AUDIO_FORMAT_AC3, AUDIO_CHANNEL_OUT_5POINT1, 48000, AUDIO_OUTPUT_FLAG_DIRECT);    \n    ASSERT_EQ(selectedDeviceId, mDefaultOutputDevice-\u003egetId());\n\nI think the problem is due to the fact that the returned value here isn\u0027t always the default output device as \u0027getFirstDeviceId\u0027 literally returns the first device from the list. Looks like \u0027msdDevices\u0027 need to be reorganized to make sure that \u0027default output device\u0027 comes first in this list.",
      "range": {
        "startLine": 1056,
        "startChar": 0,
        "endLine": 1056,
        "endChar": 56
      },
      "revId": "baa4fa9a7e4c63c8be10dd8a7bf182eb90d78d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a750f8e_021b92eb",
        "filename": "services/audiopolicy/managerdefault/AudioPolicyManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1056,
      "author": {
        "id": 1281351
      },
      "writtenOn": "2021-01-26T23:00:55Z",
      "side": 1,
      "message": "Hi Mikhail,\n\nI checked \u0027msdDevices\u0027 and it contains only the OUT_BUS device. This would compare successfully with the check:\n\n    ASSERT_EQ(selectedDeviceId, mMsdOutputDevice-\u003egetId());\n\nI don\u0027t think I have visibility of the downstream code but since the test is now comparing:\n\n    ASSERT_EQ(selectedDeviceId, mDefaultOutputDevice-\u003egetId());\n\ndoes that mean we are now reporting the actual sink for MSD playback threads? If that is the case, then I would expect that the line below wouldn\u0027t be present in the downstream code anymore:\n\n    outputDevices \u003d msdDevices;\n\nWould you be able to check for me whether that is indeed the case?\n\nAssuming the line above isn\u0027t present, that means \u0027outputDevices\u0027 has more than one device as expected for dual patches. Then your argument regarding the ordering of devices in \u0027outputDevices\u0027 applies. Would the code below solve this issue for downstream by reporting the best matching device?\n\n    std::vector\u003caudio_devices_t\u003e deviceTypes;\n    if (requestedDevice !\u003d nullptr) {\n        deviceTypes.push_back(requestedDevice-\u003etype());\n    }\n    deviceTypes.push_back(getConfig().getDefaultOutputDevice()-\u003etype());\n    DeviceVector devices \u003d outputDevices.getFirstDevicesFromTypes(deviceTypes);\n    if (devices.empty()) {\n        devices \u003d outputDevices;\n    }\n    *selectedDeviceId \u003d getFirstDeviceId(devices);\n\nThanks, Michael",
      "parentUuid": "8488ddaa_04dac5c8",
      "range": {
        "startLine": 1056,
        "startChar": 0,
        "endLine": 1056,
        "endChar": 56
      },
      "revId": "baa4fa9a7e4c63c8be10dd8a7bf182eb90d78d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd660888_2a599d2b",
        "filename": "services/audiopolicy/managerdefault/AudioPolicyManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1056,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2021-01-27T01:09:13Z",
      "side": 1,
      "message": "Good catch about the missing line! In fact, that line was removed in the patch that enables reporting of the actual sink device. You can see that this line was already absent on the Partner Gerrit source where you had initially uploaded your CL (PG is the downstream code, actually).\n\nSo, I\u0027ve upstreamed to AOSP Eric\u0027s patch for reporting the actual sink device, prepending your CL with it, resolved merge conflicts (now the CL is the same as it was on the PG modulo comments addressed on AOSP). And now I\u0027m having the same audiopolicy_tests failures as I had previously downstream.\n\nThus, now we are on the same page in AOSP. Michael, please find the best way to address the test failure since unfortunately I don\u0027t have time at the moment. Thanks for your patience!",
      "parentUuid": "9a750f8e_021b92eb",
      "range": {
        "startLine": 1056,
        "startChar": 0,
        "endLine": 1056,
        "endChar": 56
      },
      "revId": "baa4fa9a7e4c63c8be10dd8a7bf182eb90d78d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f389d2d_619f1d6f",
        "filename": "services/audiopolicy/managerdefault/AudioPolicyManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1056,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2021-01-27T19:30:50Z",
      "side": 1,
      "message": "Thanks for working on this, Michael! Indeed the PS7 passes APM unit tests both in AOSP and downstream. However, I have a concern about the proposed approach. The issue is that by operating on device types only we can end up selecting a wrong device in the case when there are multiple devices with the same type but a different address. This isn\u0027t a problem in the unit test because there the device types are distinct, but this issue can arise in automotive case which typically uses multiple BUS devices with different addresses.\n\nI think what we need to do is--instead of using \u0027getFirstDeviceId\u0027 just implement a loop over \u0027outputDevices\u0027 to pick preferrably the same device (same id) as \u0027getDefaultOutputDevice\u0027, or resort to choosing the first device.",
      "parentUuid": "dd660888_2a599d2b",
      "range": {
        "startLine": 1056,
        "startChar": 0,
        "endLine": 1056,
        "endChar": 56
      },
      "revId": "baa4fa9a7e4c63c8be10dd8a7bf182eb90d78d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}