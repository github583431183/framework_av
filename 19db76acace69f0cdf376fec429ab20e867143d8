{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8a4a8982_4131ccb8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2022-01-31T21:41:30Z",
      "side": 1,
      "message": "why not separate files?\n\nit seems that none of the m3u8 files include more than 1 such file.\nit seems that several binary files contain multiple _MARK markers, but I think I\u0027d be happier seeing there be a set of 3-4 separate files than having the fuzzer parse a binary file...\n\nso for example corpus/index9 seems to be one that defines\nan m3u8 file and 3 media (_MARK_B) files.  why\ndon\u0027t we have a corpus/index9 (or corpus/index9.m3u8)\nand have three corpus/index9_binary1   or something like that\nfor each of those dependent files.",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 10,
        "endChar": 47
      },
      "revId": "19db76acace69f0cdf376fec429ab20e867143d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df999302_bfb6baae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2022-01-31T22:06:29Z",
      "side": 1,
      "message": "Ray,\nFuzzer plugins have a single entry point\nLLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n\nwhich feeds the input of \"size\" bytes in buffer \"data\".\n\nSo the plugin will need to parse everything from a single buffer.\n\nFiles in corpus folder are just to assist in generating such files faster and thus improve coverage. Plugin doesn\u0027t directly read any files from the corpus, instead files in corpus are read by the module that calls LLVMFuzzerTestOneInput() and passes that data to the plugin (after modifying that data and/or size in each run).\n\nThe marker approach is based on prior suggestions that were followed in the past in other fuzzer plugin implementations to improve code coverage.",
      "parentUuid": "8a4a8982_4131ccb8",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 10,
        "endChar": 47
      },
      "revId": "19db76acace69f0cdf376fec429ab20e867143d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f530cb2_87a25ad4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1858334
      },
      "writtenOn": "2023-06-21T04:54:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df999302_bfb6baae",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 10,
        "endChar": 47
      },
      "revId": "19db76acace69f0cdf376fec429ab20e867143d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "876fa2b6_348e9c4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1868610
      },
      "writtenOn": "2022-11-30T15:17:27Z",
      "side": 1,
      "message": "Can you please share execution speed?",
      "revId": "19db76acace69f0cdf376fec429ab20e867143d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12cece11_047e87c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1858334
      },
      "writtenOn": "2022-12-12T08:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "876fa2b6_348e9c4a",
      "revId": "19db76acace69f0cdf376fec429ab20e867143d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}