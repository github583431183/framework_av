{
  "comments": [
    {
      "key": {
        "uuid": "0670aa87_144f54da",
        "filename": "media/mtp/AsyncIO.cpp",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "It looks it\u0027s OK to type the argument as aiocb* instead of void*, because std::thread processes a function and its arguments by using template.\nhttp://en.cppreference.com/w/cpp/thread/thread/thread",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_b4f4e069",
        "filename": "media/mtp/AsyncIO.cpp",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "Should use std::unique_ptr instead of raw pointer?",
      "range": {
        "startLine": 54,
        "startChar": 11,
        "endLine": 54,
        "endChar": 24
      },
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_3401b06b",
        "filename": "media/mtp/AsyncIO.cpp",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "nit: lk.unlock() is not needed?",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_f469f83a",
        "filename": "media/mtp/AsyncIO.cpp",
        "patchSetId": 6
      },
      "lineNbr": 71,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "Can we reuse splice_write_func?",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_54fe2c46",
        "filename": "media/mtp/AsyncIO.cpp",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "nit: lk.unlock() is not needed?",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_74fb2855",
        "filename": "media/mtp/AsyncIO.cpp",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "notify_one should be invoked after lk.unlock()?\n\nIt looks the thread invoking write_cond.wait try to acquire queue_lock mutex before checking the condition. Keeping the lock while calling notify_one block the thread immediately again, so it\u0027s not efficient.\nhttp://en.cppreference.com/w/cpp/thread/condition_variable/notify_one",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_d464fc63",
        "filename": "media/mtp/AsyncIO.cpp",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "Can we reuse write_func?",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_f4ee5899",
        "filename": "media/mtp/AsyncIO.cpp",
        "patchSetId": 6
      },
      "lineNbr": 111,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "Adding CHECK is useful to prevent double call of aio_pool_init ?\n\nhttps://cs.corp.google.com/android/system/core/base/include/android-base/logging.h?q\u003dpackage:android+CHECK\u0026l\u003d204",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_945a849a",
        "filename": "media/mtp/AsyncIO.cpp",
        "patchSetId": 6
      },
      "lineNbr": 129,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "unlock before invoking notify_one.",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_b45f8089",
        "filename": "media/mtp/AsyncIO.cpp",
        "patchSetId": 6
      },
      "lineNbr": 142,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "unlock before invoking notify_one.",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_0df0b174",
        "filename": "media/mtp/AsyncIO.h",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "nit: Remove the trailing space.",
      "range": {
        "startLine": 62,
        "startChar": 62,
        "endLine": 62,
        "endChar": 63
      },
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675ae07_392db7c8",
        "filename": "media/mtp/AsyncIO.h",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "268cce49_0df0b174",
      "range": {
        "startLine": 62,
        "startChar": 62,
        "endLine": 62,
        "endChar": 63
      },
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_2df56d65",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 151,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "nit: The structures should be const?",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675ae07_1ac38949",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 151,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "268cce49_2df56d65",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_4deab988",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 156,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "Maybe we should use the same value for bInterfaceClass, bInterfaceSubClass, bInterfaceProtocol, defined in f_mtp.c ?\n\nhttps://cs.corp.google.com/android/hardware/bsp/kernel/common/v4.4/drivers/usb/gadget/function/f_mtp.c?q\u003dpackage:android+mtp_usb\u0026dr\u003dC\u0026l\u003d1048",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675ae07_3a104530",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 156,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "So according to the MTP protocol, compliant class and subclass should be the same as those for PTP. The vendor specific codes are necessary for windows, which for some time didn\u0027t support the compliant version and instead required a special handshake. There isn\u0027t really a clean way to implement this handshake with ffs and on my testing with windows 10, it seems like windows now also supports the standard compliant values without the handshake. It would be easy to move to these new values, although we might lose compatibility with some older versions of windows. I haven\u0027t gotten my hands on an older windows device to test yet though. Do you have any thoughts on this? \n\nSee slide 6 in http://events.linuxfoundation.org/sites/events/files/slides/Media%20Transfer%20Protocol.pdf for this info.",
      "parentUuid": "268cce49_4deab988",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_0d1d117b",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 156,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-01T01:05:53Z",
      "side": 1,
      "message": "I\u0027m still thinking if there is benefit for users if we follow the spec. I agree with that we basically should follow the spec. But in this case, changing the classes may break old Windows or AFT (https://www.android.com/filetransfer/). Following the spec does not give us better compatibility here.",
      "parentUuid": "2675ae07_3a104530",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06cc2aaa_9b6bec11",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 156,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-11-01T19:06:52Z",
      "side": 1,
      "message": "Yeah I will do some testing on older windows machines soon so we can be sure. I\u0027m not sure that a lot of users still use windows xp, but 7 and above are definitely important.",
      "parentUuid": "268cce49_0d1d117b",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_d43b1c30",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 156,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "I read the article you attached and SGTM. Thank you!",
      "parentUuid": "06cc2aaa_9b6bec11",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_6def7597",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "source should be USB_DIR_IN?",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675ae07_d93ae3e0",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "For usb endpoints, IN always refers to device to host, and OUT refers to host to device.",
      "parentUuid": "268cce49_6def7597",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_8ded814f",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-01T01:05:53Z",
      "side": 1,
      "message": "Could you double check? In f_mtp.c, there are three endpoints, in, out, intr. And the directions look like USB_DIR_IN for in, USB_DIR_OUT for out, USB_DIR_IN for intr.\n\nhttps://cs.corp.google.com/android/hardware/bsp/kernel/common/v4.4/drivers/usb/gadget/function/f_mtp.c?rcl\u003d4ecd03a43349a6dab58bc7f964de13698a5cef0e\u0026l\u003d213\n\nIn the func_desc structure in this file, there are also three endpoints: source, sink, intr. And the directions look like USB_DIR_OUT for source, USB_DIR_IN for sink, and USB_DIR_IN for intr.\n\nI\u0027m not sure if the difference of orders (USB_DIR_IN, USB_DIR_OUT, USB_DIR_IN) vs (USB_DIR_OUT, USB_DIR_IN, USB_DIR_IN) is matter. But wondered why the two definitions are different.",
      "parentUuid": "2675ae07_d93ae3e0",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06cc2aaa_7bb1302c",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-11-01T19:06:52Z",
      "side": 1,
      "message": "Except for the difference in orders, which I didn\u0027t realize, this is all consistent. I used the conventions from /system/core/adb/usb_linux_client.cpp where hs_source is the source for the device, but the endpoint name (bulk_out) refers to the hosts perspective and USB_DIR_OUT refers to the host\u0027s perspective as well. See https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_DIR_IN. f_mtp doesn\u0027t use the terms source and sink but you can see that ep_in is used as the sink and ep_out is used as the source.",
      "parentUuid": "268cce49_8ded814f",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0670aa87_5459cc9f",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-11-02T09:24:12Z",
      "side": 1,
      "message": "I wonder if any order of endpoints is acceptable for USB hosts. I checked Android MTP host implementation and it looks it can handle any order. Not sure for others. Do you have information about that?",
      "parentUuid": "06cc2aaa_7bb1302c",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_8d03c173",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "sink should be USB_DIR_OUT?",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675ae07_19447b67",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "see above",
      "parentUuid": "268cce49_8d03c173",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_ad007d67",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 262,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "nit: Debug code?",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675ae07_7a363db1",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 262,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "268cce49_ad007d67",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_4d65595d",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 553,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "This should be mClosedLock.",
      "range": {
        "startLine": 553,
        "startChar": 36,
        "endLine": 553,
        "endChar": 46
      },
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675ae07_0e9fca35",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 553,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "268cce49_4d65595d",
      "range": {
        "startLine": 553,
        "startChar": 36,
        "endLine": 553,
        "endChar": 46
      },
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_8d4e61dc",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 556,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "1. configure()\n2. configure()\n3. start()\n\nwill cause dead lock here because mClosed will not be true at the second configure call.",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675ae07_f9d31f5d",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 556,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "you\u0027re right this block should be below the check for ffs being already open so the second configure does not wait.",
      "parentUuid": "268cce49_8d4e61dc",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_6d6a1530",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 562,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "We have dead lock here?\n\n1. configure()\n2. configure() // Return here because mBulkIn \u003e 0.\n3. start() // mReadyCond.wait does not return because mReady will not be true.",
      "range": {
        "startLine": 562,
        "startChar": 4,
        "endLine": 562,
        "endChar": 30
      },
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_cd26a92e",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 562,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "If mBulkIn has already been opened, it\u0027s OK not to check mPtp !\u003d usePtp?",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "466e220f_ab3e997c",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 562,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "If the first configure sets mReady to true, additional configures shouldn\u0027t affect that value.",
      "parentUuid": "268cce49_6d6a1530",
      "range": {
        "startLine": 562,
        "startChar": 4,
        "endLine": 562,
        "endChar": 30
      },
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675ae07_b96527cd",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 562,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "A configuration change from mtp to ptp will cause mtpserver to shut down and close the non config endpoints. Configure would be called, but it would have to wait for the server to finish closing before resetting the config",
      "parentUuid": "268cce49_cd26a92e",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268cce49_cdfdc94a",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 1091002
      },
      "writtenOn": "2016-10-31T02:05:06Z",
      "side": 1,
      "message": "Can we define everything except for get_ffs_handle in an anonymous namespace?",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675ae07_1a4e293a",
        "filename": "media/mtp/MtpFfsHandle.cpp",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 1113594
      },
      "writtenOn": "2016-10-31T21:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "268cce49_cdfdc94a",
      "revId": "1f40faaa987aa0d927e094b6bebc2cfc35e5858f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}