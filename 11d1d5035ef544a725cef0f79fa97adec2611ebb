{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "937eda92_be7422af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-10-28T22:58:16Z",
      "side": 1,
      "message": "if I understand the bug correctly, if i were to configure in the original with these smaller ht/width/framerate values, i\u0027m not getting the correct calculated profile.\n\nlooking at the CTS test line that this is to re-enable: we specify all 3 of those parameters.  To me, that should result in a proper setting of the profile.\n\nthat seems more a problem in how (or when)  we calculate the profile than anything else. Changing the defaults doesn\u0027t feel like the correct answer; it seems to mask the problem rather than fix it.\n\nso I\u0027m going to -1 this for the time being until that\u0027s been answered.",
      "revId": "11d1d5035ef544a725cef0f79fa97adec2611ebb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea597f77_c5229ded",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2021-10-28T23:51:34Z",
      "side": 1,
      "message": "Ray,\nProfileLevelSetter() is called first with default values (320x240 30fps 64kbps) and the following line\nhttps://cs.android.com/android/platform/superproject/+/master:frameworks/av/media/codec2/components/hevc/C2SoftHevcEnc.cpp;l\u003d353;drc\u003dmaster?q\u003dC2SoftHevcEnc.cpp\n\nadjusts the level to 2.0 as for the default values, as level 1.0 isn\u0027t sufficient for default values.\n\nAfter this, ProfileLevelSetter() is called with actual values and by this time, level is already adjusted to 2.0 and the function checks if the levels starting from 2.0 are enough to meet the given requirements.\n\nSince level 2.0 is sufficient for lower resolutions, it stays with level 2.0.",
      "parentUuid": "937eda92_be7422af",
      "revId": "11d1d5035ef544a725cef0f79fa97adec2611ebb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abe723c2_60254c80",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-10-29T01:50:45Z",
      "side": 1,
      "message": "i think that ProfileLevelSetter() needs to start at 1 each time called.\n\nthe current semantics as you explain them are:\n  the plugin will auto-raise the level even if I set it to a low number.\nBut it won\u0027t auto-lower the level.\n\nthis actually works against a user.  If I\u0027ve specified a level (because the entity I\u0027m giving the output to accepts only up to that level), then this behavior will generate an incompatible encoding (my recipient can not handle the auto-raised higher level).  If I can\u0027t fit in that level, then the configure() should fail.\n\nThe principle of least surprise says that if the plugin is going to change the level, it can only be to a lower level -- because it stays within the bounds\nset by the user.\n\n\nif we don\u0027t want to reject the configure when the user specified parms that need a higher level -- which seems to be what it intended by this loop -- then we really should make this loop always set the level, whether it be higher or lower than what the user may have indicated.  I think that\u0027s the correct change here.",
      "parentUuid": "ea597f77_c5229ded",
      "revId": "11d1d5035ef544a725cef0f79fa97adec2611ebb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "114c9a07_48cb7e18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2021-10-29T03:20:52Z",
      "side": 1,
      "message": "Ray,\nAs you have pointed out, design has always been to not fail for a level that is insufficient and instead increase it appropriately.\n\nNow keeping the failing case aside,\nonly time where it is necessary to change the level is when the configured level is not sufficient to cover other parameters passed. Not increasing the level would produce a stream that is not compliant to specification. Hence it is necessary to increase the level.\n\nOther case where user configures a higher level than what is required for configured width, height, frame rate and bitrate, level must not be lowered as there is no reason to do so. User may have valid reasons to ask for a level that is larger (like increasing bitrate later for eg) and also specification allows for a higher level for a given set of parameters.",
      "parentUuid": "abe723c2_60254c80",
      "revId": "11d1d5035ef544a725cef0f79fa97adec2611ebb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}