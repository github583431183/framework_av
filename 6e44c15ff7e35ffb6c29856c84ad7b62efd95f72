{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1c19a5f9_a5c7567e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1234492
      },
      "writtenOn": "2022-07-07T04:20:35Z",
      "side": 1,
      "message": "- issue tracker:\n\nhttps://partnerissuetracker.corp.google.com/u/3/issues/237997490\n\n- analysis\n\nThe issue is draw defect in gallery with thumbnail of video. Copied from internal discussion:\n\nSection 5.11 of the GLSL ES spec includes:\n\n5.11 Evaluation of Expressions\n\nThe C++ standard requires that expressions must be evaluated in the order specified by the precedence of operations and may only be regrouped if the result is the same or where the result is undefined. No other transforms may be applied that affect the result of an operation. GLSL ES relaxes these requirements in the following ways:\n\n• Addition and multiplication are assumed to be associative.\n• Multiplication may be replaced by repeated addition\n• Floating point division may be replaced by reciprocal and multiplication:\n• Within the constraints of invariance (where applicable), the precision used may vary.\n\n\nThe associate multiplies below accords to the spec.\n\nexample:\n float nits;\n float slope \u003d (y1 - y0) / (x1 - x0);\n nits \u003d y0 + (nits - x0) * slope;\n\n\nA \u003d (y1 - y0)\nB \u003d (x1 - x0)\nC \u003d (nits - x0)\n\nOriginal:\nnits \u003d y0 + C * (A / B)\n\ndivision \u003d\u003e recip + mul\nnits \u003d y0 + C * (A * (1 / B))\n\nre-associate multiplies:\nnits \u003d y0 + (C * A) * (1 / B)\n\nAs you can see, C * A could exceed the float maximal number. It converts to float nits would cause incorrect value.\n",
      "revId": "6e44c15ff7e35ffb6c29856c84ad7b62efd95f72",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99d9d31e_9170995f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1234492
      },
      "writtenOn": "2022-07-07T04:38:57Z",
      "side": 1,
      "message": "The counter part in renderengine is in \nhttps://android-review.googlesource.com/c/platform/frameworks/native/+/2135173\n\nThe issue appeared in libstagefright/renderfright only.",
      "revId": "6e44c15ff7e35ffb6c29856c84ad7b62efd95f72",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e26ec2f_00bdec48",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2022-07-07T18:50:10Z",
      "side": 1,
      "message": "How would you get overflow here since this only contains subtraction \u0026 division (and doesn\u0027t look to be dividing by a number \u003c1), and none of the inputs are highp either?",
      "revId": "6e44c15ff7e35ffb6c29856c84ad7b62efd95f72",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4c6c2a0_a7e93323",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1071172
      },
      "writtenOn": "2022-07-08T15:56:29Z",
      "side": 1,
      "message": "Thanks for asking.\nTo share more information, I replied in https://partnerissuetracker.corp.google.com/u/1/issues/237997490.",
      "parentUuid": "9e26ec2f_00bdec48",
      "revId": "6e44c15ff7e35ffb6c29856c84ad7b62efd95f72",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}