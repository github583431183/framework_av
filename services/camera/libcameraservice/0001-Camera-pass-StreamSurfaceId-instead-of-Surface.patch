From 45069aebb80d42766db6f6ed1dfdad49d1a8c0c5 Mon Sep 17 00:00:00 2001
From: Yin-Chia Yeh <yinchiayeh@google.com>
Date: Fri, 10 Nov 2017 20:00:09 -0800
Subject: [PATCH] Camera: pass StreamSurfaceId instead of Surface

TODO: update NDK

Test: CTS
Bug: 68020997
Change-Id: I71d6a1373ff09dcb21d39f78dd56727cbde9a3ad
---
 camera/camera2/CaptureRequest.cpp                  | 61 +++++++++++++++--
 camera/include/camera/camera2/CaptureRequest.h     |  2 +
 .../libcameraservice/api2/CameraDeviceClient.cpp   | 76 ++++++++++++++++------
 .../libcameraservice/api2/CameraDeviceClient.h     |  4 ++
 4 files changed, 115 insertions(+), 28 deletions(-)

diff --git a/camera/camera2/CaptureRequest.cpp b/camera/camera2/CaptureRequest.cpp
index 059795033..92193260d 100644
--- a/camera/camera2/CaptureRequest.cpp
+++ b/camera/camera2/CaptureRequest.cpp
@@ -44,6 +44,8 @@ status_t CaptureRequest::readFromParcel(const android::Parcel* parcel) {
 
     mMetadata.clear();
     mSurfaceList.clear();
+    mStreamIdxList.clear();
+    mSurfaceIdxList.clear();
 
     status_t err = OK;
 
@@ -53,6 +55,13 @@ status_t CaptureRequest::readFromParcel(const android::Parcel* parcel) {
     }
     ALOGV("%s: Read metadata from parcel", __FUNCTION__);
 
+    int isReprocess = 0;
+    if ((err = parcel->readInt32(&isReprocess)) != OK) {
+        ALOGE("%s: Failed to read reprocessing from parcel", __FUNCTION__);
+        return err;
+    }
+    mIsReprocess = (isReprocess != 0);
+
     int32_t size;
     if ((err = parcel->readInt32(&size)) != OK) {
         ALOGE("%s: Failed to read surface list size from parcel", __FUNCTION__);
@@ -61,7 +70,7 @@ status_t CaptureRequest::readFromParcel(const android::Parcel* parcel) {
     ALOGV("%s: Read surface list size = %d", __FUNCTION__, size);
 
     // Do not distinguish null arrays from 0-sized arrays.
-    for (int i = 0; i < size; ++i) {
+    for (int32_t i = 0; i < size; ++i) {
         // Parcel.writeParcelableArray
         size_t len;
         const char16_t* className = parcel->readString16Inplace(&len);
@@ -88,12 +97,39 @@ status_t CaptureRequest::readFromParcel(const android::Parcel* parcel) {
         mSurfaceList.push_back(surface);
     }
 
-    int isReprocess = 0;
-    if ((err = parcel->readInt32(&isReprocess)) != OK) {
-        ALOGE("%s: Failed to read reprocessing from parcel", __FUNCTION__);
+    int32_t streamSurfaceSize;
+    if ((err = parcel->readInt32(&streamSurfaceSize)) != OK) {
+        ALOGE("%s: Failed to read streamSurfaceSize from parcel", __FUNCTION__);
         return err;
     }
-    mIsReprocess = (isReprocess != 0);
+
+    if (streamSurfaceSize < 0) {
+        ALOGE("%s: Bad streamSurfaceSize %d from parcel", __FUNCTION__, streamSurfaceSize);
+        return BAD_VALUE;
+    }
+
+    size_t remainingDataSize = sizeof(int32_t) * 2 * streamSurfaceSize;
+    if (remainingDataSize > parcel->dataAvail() || remainingDataSize > INT_MAX) {
+        ALOGE("%s: Bad CaptureRequest Parcel: streamSurfaceSize: %d, remaining data: %zu",
+                __FUNCTION__, streamSurfaceSize, parcel->dataAvail());
+        return BAD_VALUE;
+    }
+
+    for (int32_t i = 0; i < streamSurfaceSize; ++i) {
+        int streamIdx;
+        if ((err = parcel->readInt32(&streamIdx)) != OK) {
+            ALOGE("%s: Failed to read stream index from parcel", __FUNCTION__);
+            return err;
+        }
+        mStreamIdxList.push_back(streamIdx);
+
+        int surfaceIdx;
+        if ((err = parcel->readInt32(&surfaceIdx)) != OK) {
+            ALOGE("%s: Failed to read surface index from parcel", __FUNCTION__);
+            return err;
+        }
+        mSurfaceIdxList.push_back(surfaceIdx);
+    }
 
     return OK;
 }
@@ -110,6 +146,8 @@ status_t CaptureRequest::writeToParcel(android::Parcel* parcel) const {
         return err;
     }
 
+    parcel->writeInt32(mIsReprocess ? 1 : 0);
+
     int32_t size = static_cast<int32_t>(mSurfaceList.size());
 
     // Send 0-sized arrays when it's empty. Do not send null arrays.
@@ -130,8 +168,17 @@ status_t CaptureRequest::writeToParcel(android::Parcel* parcel) const {
         }
     }
 
-    parcel->writeInt32(mIsReprocess ? 1 : 0);
-
+    parcel->writeInt32(mStreamIdxList.size());
+    for (size_t i = 0; i < mStreamIdxList.size(); ++i) {
+        if ((err = parcel->writeInt32(mStreamIdxList[i])) != OK) {
+            ALOGE("%s: Failed to write stream index to parcel", __FUNCTION__);
+            return err;
+        }
+        if ((err = parcel->writeInt32(mSurfaceIdxList[i])) != OK) {
+            ALOGE("%s: Failed to write surface index to parcel", __FUNCTION__);
+            return err;
+        }
+    }
     return OK;
 }
 
diff --git a/camera/include/camera/camera2/CaptureRequest.h b/camera/include/camera/camera2/CaptureRequest.h
index 01801831e..026c39e11 100644
--- a/camera/include/camera/camera2/CaptureRequest.h
+++ b/camera/include/camera/camera2/CaptureRequest.h
@@ -42,6 +42,8 @@ struct CaptureRequest : public Parcelable {
 
     CameraMetadata          mMetadata;
     Vector<sp<Surface> >    mSurfaceList;
+    Vector<int>             mStreamIdxList;
+    Vector<int>             mSurfaceIdxList; // per stream surface list index
     bool                    mIsReprocess;
 
     /**
diff --git a/services/camera/libcameraservice/api2/CameraDeviceClient.cpp b/services/camera/libcameraservice/api2/CameraDeviceClient.cpp
index 0429e7f75..1b2c0014c 100644
--- a/services/camera/libcameraservice/api2/CameraDeviceClient.cpp
+++ b/services/camera/libcameraservice/api2/CameraDeviceClient.cpp
@@ -174,7 +174,7 @@ binder::Status CameraDeviceClient::submitRequestList(
                    __FUNCTION__, mCameraIdStr.string());
             return STATUS_ERROR(CameraService::ERROR_ILLEGAL_ARGUMENT,
                     "Request settings are empty");
-        } else if (request.mSurfaceList.isEmpty()) {
+        } else if (request.mSurfaceList.isEmpty() && request.mStreamIdxList.size() == 0) {
             ALOGE("%s: Camera %s: Requests must have at least one surface target. "
                     "Rejecting request.", __FUNCTION__, mCameraIdStr.string());
             return STATUS_ERROR(CameraService::ERROR_ILLEGAL_ARGUMENT,
@@ -193,31 +193,65 @@ binder::Status CameraDeviceClient::submitRequestList(
          */
         SurfaceMap surfaceMap;
         Vector<int32_t> outputStreamIds;
-        for (sp<Surface> surface : request.mSurfaceList) {
-            if (surface == 0) continue;
+        if (request.mSurfaceList.size() > 0) {
+            for (sp<Surface> surface : request.mSurfaceList) {
+                if (surface == 0) continue;
+
+                sp<IGraphicBufferProducer> gbp = surface->getIGraphicBufferProducer();
+                int idx = mStreamMap.indexOfKey(IInterface::asBinder(gbp));
+
+                // Trying to submit request with surface that wasn't created
+                if (idx == NAME_NOT_FOUND) {
+                    ALOGE("%s: Camera %s: Tried to submit a request with a surface that"
+                            " we have not called createStream on",
+                            __FUNCTION__, mCameraIdStr.string());
+                    return STATUS_ERROR(CameraService::ERROR_ILLEGAL_ARGUMENT,
+                            "Request targets Surface that is not part of current capture session");
+                }
 
-            sp<IGraphicBufferProducer> gbp = surface->getIGraphicBufferProducer();
-            int idx = mStreamMap.indexOfKey(IInterface::asBinder(gbp));
+                const StreamSurfaceId& streamSurfaceId = mStreamMap.valueAt(idx);
+                if (surfaceMap.find(streamSurfaceId.streamId()) == surfaceMap.end()) {
+                    surfaceMap[streamSurfaceId.streamId()] = std::vector<size_t>();
+                    outputStreamIds.push_back(streamSurfaceId.streamId());
+                }
+                surfaceMap[streamSurfaceId.streamId()].push_back(streamSurfaceId.surfaceId());
 
-            // Trying to submit request with surface that wasn't created
-            if (idx == NAME_NOT_FOUND) {
-                ALOGE("%s: Camera %s: Tried to submit a request with a surface that"
-                        " we have not called createStream on",
-                        __FUNCTION__, mCameraIdStr.string());
-                return STATUS_ERROR(CameraService::ERROR_ILLEGAL_ARGUMENT,
-                        "Request targets Surface that is not part of current capture session");
+                ALOGV("%s: Camera %s: Appending output stream %d surface %d to request",
+                        __FUNCTION__, mCameraIdStr.string(), streamSurfaceId.streamId(),
+                        streamSurfaceId.surfaceId());
             }
+        } else {
+            for (size_t i = 0; i < request.mStreamIdxList.size(); i++) {
+                int streamId = request.mStreamIdxList.itemAt(i);
+                int surfaceId = request.mSurfaceIdxList.itemAt(i);
+                StreamSurfaceId streamSurfaceId(streamId, surfaceId);
+
+                bool found = false;
+                for (size_t j = 0; j < mStreamMap.size(); j++) {
+                    if (streamSurfaceId == mStreamMap.valueAt(j)) {
+                        found = true;
+                        break;
+                    }
+                }
 
-            const StreamSurfaceId& streamSurfaceId = mStreamMap.valueAt(idx);
-            if (surfaceMap.find(streamSurfaceId.streamId()) == surfaceMap.end()) {
-                surfaceMap[streamSurfaceId.streamId()] = std::vector<size_t>();
-                outputStreamIds.push_back(streamSurfaceId.streamId());
-            }
-            surfaceMap[streamSurfaceId.streamId()].push_back(streamSurfaceId.surfaceId());
+                if (!found) {
+                    ALOGE("%s: Camera %s: Tried to submit a request with a surface that"
+                            " we have not called createStream on: stream %d, surface %d",
+                            __FUNCTION__, mCameraIdStr.string(), streamId, surfaceId);
+                    return STATUS_ERROR(CameraService::ERROR_ILLEGAL_ARGUMENT,
+                            "Request targets Surface that is not part of current capture session");
+                }
 
-            ALOGV("%s: Camera %s: Appending output stream %d surface %d to request",
-                    __FUNCTION__, mCameraIdStr.string(), streamSurfaceId.streamId(),
-                    streamSurfaceId.surfaceId());
+                if (surfaceMap.find(streamId) == surfaceMap.end()) {
+                    surfaceMap[streamId] = std::vector<size_t>();
+                    outputStreamIds.push_back(streamId);
+                }
+                surfaceMap[streamId].push_back(surfaceId);
+
+                ALOGV("%s: Camera %s: Appending output stream %d surface %d to request",
+                        __FUNCTION__, mCameraIdStr.string(), streamSurfaceId.streamId(),
+                        streamSurfaceId.surfaceId());
+            }
         }
 
         metadata.update(ANDROID_REQUEST_OUTPUT_STREAMS, &outputStreamIds[0],
diff --git a/services/camera/libcameraservice/api2/CameraDeviceClient.h b/services/camera/libcameraservice/api2/CameraDeviceClient.h
index e8fc080c4..85c095058 100644
--- a/services/camera/libcameraservice/api2/CameraDeviceClient.h
+++ b/services/camera/libcameraservice/api2/CameraDeviceClient.h
@@ -200,6 +200,10 @@ private:
             return mSurfaceId;
         }
 
+        bool operator==(const StreamSurfaceId& other) {
+            return mStreamId == other.mStreamId && mSurfaceId == other.mSurfaceId;
+        }
+
     private:
         int32_t mStreamId;
         int32_t mSurfaceId;
-- 
2.15.0.448.gf294e3d99a-goog

