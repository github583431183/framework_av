{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6dfc540f_ae34ba2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-04T18:55:32Z",
      "side": 1,
      "message": "We really need to make an intrinsic version of this that can parallelize, as the exp is executed once per audio frame.\n\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/av/media/libeffects/loudness/EffectLoudnessEnhancer.cpp;drc\u003da9d3b5b323a676af06e6c8dd10113438bc89f56b;l\u003d313\n\nThat being said, the exp is not that far off from a multiply according to gcc benchmarks.\n\nhttps://stackoverflow.com/questions/70911865/benchmark-functions-in-cmath-with-gcc-and-msvs\n\nAnd the approx code ExpApproximationViaTaylorExpansionOrder5() has 8 multiplies and 5 adds, so it isn\u0027t cheap either.\n\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/av/media/libeffects/loudness/common/core/math.h;drc\u003d6cc3a9948b51193dfdcb0c3527d7f3d1ca38aa3c;l\u003d58\n\nNote that the approx code could be optimized by Horner or Estrin\u0027s algorithm.",
      "revId": "65d3568758fc148fd7ae956e0ff1bee1bde1f259",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "befe10e2_af11531b",
        "filename": "media/libeffects/loudness/dsp/core/dynamic_range_compression.cpp",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-05T04:39:13Z",
      "side": 1,
      "message": "nit: perhaps use expf() here instead of exp(), also on line 128.  I checked on Bionic and the floating point version of expf() benchmarks faster than the double version of exp() on the Pixel 7.\n\nBM_math_exp_speccpu2017                                 4.19 ns         4.17 ns    167221486\nBM_math_exp_speccpu2017_latency                         16.2 ns         16.1 ns     43145733\nBM_math_expf_speccpu2017                                3.03 ns         3.02 ns    232715816\nBM_math_expf_speccpu2017_latency                        15.4 ns         15.3 ns     45667758\n\nSource for the benchmark\n\nhttps://cs.android.com/android/platform/superproject/main/+/main:bionic/benchmarks/math_benchmark.cpp;drc\u003d56f4511c39589a6ac6957675e9d2feb212dfb708;l\u003d239",
      "range": {
        "startLine": 94,
        "startChar": 24,
        "endLine": 94,
        "endChar": 27
      },
      "revId": "65d3568758fc148fd7ae956e0ff1bee1bde1f259",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cef76c37_1690a61a",
        "filename": "media/libeffects/loudness/dsp/core/dynamic_range_compression.cpp",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1243029
      },
      "writtenOn": "2023-12-05T07:56:47Z",
      "side": 1,
      "message": "Thank you for your comment.\nAs far as I checked, performance of exp, expf and ExpApproximationViaTaylorExpansionOrder5 are not so different.\n(e.g. exp 0.197ms, expf 0.204ms, ExpApproximationViaTaylorExpansionOrder5 0.205ms for 100ms stereo data)\nI think it\u0027s better to use always exp() to simplify the code.\nHow do you think about it?",
      "parentUuid": "befe10e2_af11531b",
      "range": {
        "startLine": 94,
        "startChar": 24,
        "endLine": 94,
        "endChar": 27
      },
      "revId": "65d3568758fc148fd7ae956e0ff1bee1bde1f259",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d61ed18f_a77b65e8",
        "filename": "media/libeffects/loudness/dsp/core/dynamic_range_compression.cpp",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-06T04:52:22Z",
      "side": 1,
      "message": "Absolutely. Not just for speed, but ExpApproximationViaTaylorExpansionOrder5 is somewhat inaccurate and the worst place for inaccuracy is at 1.f where it joins with exp(1.f).\n\nExpApproximationViaTaylorExpansionOrder5(1) is 2.716666667....\nexp(1) is 2.71828....\n\nSo there\u0027s a discontinuity.\n\nI\u0027ve run a benchmark:\n\nBM_math_ExpApproximationViaTaylorExpansionOrder5        2.11 ns         2.10 ns    332924668\nBM_math_exp_speccpu2017                                 4.06 ns         4.03 ns    173500928\nBBM_math_expf_speccpu2017                                2.91 ns         2.90 ns    241714501\n\nBased on these numbers, I would replace ExpApproximationViaTaylorExpansionOrder5 with expf.  Thanks!",
      "parentUuid": "cef76c37_1690a61a",
      "range": {
        "startLine": 94,
        "startChar": 24,
        "endLine": 94,
        "endChar": 27
      },
      "revId": "65d3568758fc148fd7ae956e0ff1bee1bde1f259",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}