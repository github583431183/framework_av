{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "78e7f882_dfae6c6c",
        "filename": "media/libaudioclient/include/media/TrackPlayerBase.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1003259
      },
      "writtenOn": "2024-01-15T08:46:38Z",
      "side": 1,
      "message": "did you look for direct access to this public member that would need to be replaced by getAudioTrack()?",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 31
      },
      "revId": "7e85873d407557627ee9a10f3421f6fd4302073e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b7f9f77_bce137fe",
        "filename": "media/libaudioclient/include/media/TrackPlayerBase.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2024-01-16T17:30:46Z",
      "side": 1,
      "message": "I think, a more practical solution is to replace this `sp` with an `atomic_sp`: https://cs.android.com/android/platform/superproject/main/+/main:frameworks/av/media/utils/include/mediautils/Synchronization.h;l\u003d115;drc\u003d24d1a985cba70eca151ab07d6fef76ff1ca4f483",
      "parentUuid": "78e7f882_dfae6c6c",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 31
      },
      "revId": "7e85873d407557627ee9a10f3421f6fd4302073e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac74bcd1_eb765c42",
        "filename": "media/libaudioclient/include/media/TrackPlayerBase.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2024-01-16T17:38:43Z",
      "side": 1,
      "message": "I actually don\u0027t think making this thread-safe is necessary, since if we call destroy while the object is live in a concurrent context, there is no well-formed way to make it safe.\n\nBasically, I think it\u0027s better to make the non-nullity of the sp an invariant of an inited trackplayer. This probably requires a minor change in how we call from SLES, though.",
      "parentUuid": "0b7f9f77_bce137fe",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 31
      },
      "revId": "7e85873d407557627ee9a10f3421f6fd4302073e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89ec91fc_544c777e",
        "filename": "media/libaudioclient/include/media/TrackPlayerBase.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 2005646
      },
      "writtenOn": "2024-01-16T18:27:44Z",
      "side": 1,
      "message": "To provide some more context: we\u0027re seeing occasional crashes (null pointer dereferences) in the wild in AudioTrack\u0027s `applyVolumeShaper` [here](https://android.googlesource.com/platform/frameworks/av/+/0d238df741687e4205546a0b682e5d69e0514f40/media/libaudioclient/AudioTrack.cpp#3055), called from [TrackPlayerBase](https://android.googlesource.com/platform/frameworks/av/+/0d238df741687e4205546a0b682e5d69e0514f40/media/libaudioclient/TrackPlayerBase.cpp#146), because the `AudioTrack` had already been destructed (so its `sp\u003cmedia::IAudioTrack\u003e` is null).\n\nMy main goal was to prevent such crashes by making existing null checks in `TrackPlayerBase` resilient to races (e.g. a race between `applyVolumeShaper` calling a method via the `sp\u003c\u003e` and `doDestroy()` dropping the last reference). \n\nThis CL ensures that the underlying `AudioTrack` object still exists, but doesn\u0027t guarantee that it\u0027s in a valid state. For example, the following is possible:\n\n1. Thread 1 calls `getAudioTrack()` and gets a valid reference to the `AudioTrack` object.\n2. Thread 2 calls `destroy()` which calls `stop()` on the same AudioTrack object\n3. Thread 1 now calls some other method on that object, which either races with `stop()` or doesn\u0027t expect the `AudioTrack` to be in the stopped state.\n\n\nGiven there\u0027s locking internally in `AudioTrack` I assumed this is fine, i.e. at worst it\u0027ll result in an error being returned and/or logged, but won\u0027t crash. That said:\n\n\u003e to make the non-nullity of the sp an invariant of an inited trackplayer\n\nThis does seem cleaner. What kind of changes would that require exactly?",
      "parentUuid": "ac74bcd1_eb765c42",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 31
      },
      "revId": "7e85873d407557627ee9a10f3421f6fd4302073e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1403254a_b97cf7de",
        "filename": "media/libaudioclient/include/media/TrackPlayerBase.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2024-01-16T18:55:37Z",
      "side": 1,
      "message": "\u003e This does seem cleaner. What kind of changes would that require exactly?\n\nThe only callee of destroy directly is OpenSLES.\n\nAs long as moving up the pointer clear [here](https://cs.android.com/android/platform/superproject/main/+/dd7a7ea69100ba31545b399f40f8480b07a1b508:frameworks/wilhelm/src/android/AudioPlayer_to_android.cpp;drc\u003d53ac8c773c6601a8d4e98db50dad3c390f717f7c;l\u003d1943) is valid (see after the switch statement), it should work (we are deferring handling concurrency on methods a layer up).\n\nThis is the only place I think we should have this race (but it seems very hard to hit, so I wonder if there is an issue anywhere else), since (if we call the method from sp\u003c\u003e), we can never call the dtor while holding the object to call another method. \n\nAs mentioned, we also need to check the write references since the member is public.",
      "parentUuid": "89ec91fc_544c777e",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 31
      },
      "revId": "7e85873d407557627ee9a10f3421f6fd4302073e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}