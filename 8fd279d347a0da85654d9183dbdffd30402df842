{
  "comments": [
    {
      "key": {
        "uuid": "d06d5626_49e9336f",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "we\u0027re undergoing a \u0027fix it\u0027 weak to clean up language that promotes undesired stereotypes.\nso things like master/slave are being replaced\nsanity is another of those. \nhttps://source.android.com/setup/contribute/respectful-code (I think you can see it outside) describes that policy.\n\nsuggestions to replace sanity are:  validate, verify, quick check, initial check, basic check...\n\nI\u0027ll let you pick which rephrasing you want to use.  and it would be good to hear back about whether you can actually see that web page.",
      "range": {
        "startLine": 52,
        "startChar": 22,
        "endLine": 52,
        "endChar": 28
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fcadb11_3cca1457",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Ray, I think Validate looks good. Yes, I was able to see the web page, will follow similar naming guidelines in future tests.",
      "parentUuid": "d06d5626_49e9336f",
      "range": {
        "startLine": 52,
        "startChar": 22,
        "endLine": 52,
        "endChar": 28
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdd20f44_30faf127",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "i like the pattern of doing all the get\u003c#\u003e(params) stuff at the top of the routine\nso that I can see just what is being grabbed, the names they go into help with ensuring I know what they are being used for.  I believe it makes helps for future maintenance.\n\nso i\u0027d suggest lines 108..109 go to after line 89.",
      "range": {
        "startLine": 108,
        "startChar": 7,
        "endLine": 109,
        "endChar": 38
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ced1a73_0fbb80b6",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdd20f44_30faf127",
      "range": {
        "startLine": 108,
        "startChar": 7,
        "endLine": 109,
        "endChar": 38
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8ecd3b6_ad7a9ceb",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "why GetParam().first  instead of where we see on line 151 as an example\n  tuple\u003c....\u003e param \u003d GetParam();\n\nand then some get\u003c#\u003e(params) invocations.\n\nI like it for the consistency",
      "range": {
        "startLine": 186,
        "startChar": 31,
        "endLine": 186,
        "endChar": 66
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1522a6d4_096a3651",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e8ecd3b6_ad7a9ceb",
      "range": {
        "startLine": 186,
        "startChar": 31,
        "endLine": 186,
        "endChar": 66
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7111981b_3f0ab9e9",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "should also ASSERT_EQ(csdMetaDataBaseSize, csdAMediaFormatSize) -- since line 258 seems to\nassume that they will be the same.",
      "range": {
        "startLine": 256,
        "startChar": 13,
        "endLine": 256,
        "endChar": 34
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba5d5d29_41ccd8f3",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7111981b_3f0ab9e9",
      "range": {
        "startLine": 256,
        "startChar": 13,
        "endLine": 256,
        "endChar": 34
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64dbb11a_bc4fe34c",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "are those two really bit-for-bit compatible this way?",
      "range": {
        "startLine": 258,
        "startChar": 27,
        "endLine": 258,
        "endChar": 94
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce1b109d_b813744a",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Yes, because they contain same CSD data which is part of the bitstream.",
      "parentUuid": "64dbb11a_bc4fe34c",
      "range": {
        "startLine": 258,
        "startChar": 27,
        "endLine": 258,
        "endChar": 94
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1b79944_09d9d40e",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-31T21:47:44Z",
      "side": 1,
      "message": "ok. they\u0027re both void* here.\n\none of these memcmp() -- it was a void* and a MedaData*  or something like that and I was concerned that the MetaData* one had been parsed out -- so it held the same info but in a different representation/layout. and that wouldn\u0027t compare well using memcmp().",
      "parentUuid": "ce1b109d_b813744a",
      "range": {
        "startLine": 258,
        "startChar": 27,
        "endLine": 258,
        "endChar": 94
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "476d0ce4_8612c15e",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "should we be comparing ththe results (e.g. the *csdData and *metaData) in some manner.\nnot sure that memcmp() is the right comparison, since one is void* and the other is MetaDataBase*.",
      "range": {
        "startLine": 277,
        "startChar": 0,
        "endLine": 277,
        "endChar": 1
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcfd19c0_228f672b",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Ray, we are comparing the CSD parameters like width, height, mimetype in the AvcCSDValidationTest on Line: 205. For example, we compare the width of AMediaFormat and MetaDataBase with the test parameter on Line: 215 and Line: 236 respectively.",
      "parentUuid": "476d0ce4_8612c15e",
      "range": {
        "startLine": 277,
        "startChar": 0,
        "endLine": 277,
        "endChar": 1
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56b2d37c_e3b4af75",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-31T21:47:44Z",
      "side": 1,
      "message": "ok. no change needed here.",
      "parentUuid": "bcfd19c0_228f672b",
      "range": {
        "startLine": 277,
        "startChar": 0,
        "endLine": 277,
        "endChar": 1
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5321bbe2_05cb37f7",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 290,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "who\u0027s making sure this is within the bounds of kSamplingFreq[]\ne.g. 0\u003c\u003dmAacSamplingFreqIndex \u003c sizeof(kSampingFreq)/sizeof(kSampleFreq[0])",
      "range": {
        "startLine": 290,
        "startChar": 28,
        "endLine": 290,
        "endChar": 50
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f4aa652_92b70e7c",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 290,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5321bbe2_05cb37f7",
      "range": {
        "startLine": 290,
        "startChar": 28,
        "endLine": 290,
        "endChar": 50
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "650833e5_f7213fa5",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "set this to null or \"\".   probably \"\" because of how we\u0027re using it in line 300.",
      "range": {
        "startLine": 297,
        "startChar": 15,
        "endLine": 297,
        "endChar": 25
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "967cd8a4_2db69019",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "650833e5_f7213fa5",
      "range": {
        "startLine": 297,
        "startChar": 15,
        "endLine": 297,
        "endChar": 25
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed1ba4fc_a2c85011",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "should this perhaps be the actual frequency, rather than an index into that table?\nsince the channel config in the next parameter is set up that way...\nit\u0027s good to keep the \"levels of indirection\" the same across the parameters.",
      "range": {
        "startLine": 305,
        "startChar": 62,
        "endLine": 305,
        "endChar": 84
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "685e5ce2_c2441b51",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "This function takes the samplingFreqIndex as an argument.\n\nhttps://cs.android.com/android/platform/superproject/+/master:frameworks/av/media/libstagefright/MetaDataUtils.cpp;bpv\u003d1;bpt\u003d1;l\u003d200?gsn\u003dMakeAACCodecSpecificData\u0026gs\u003dkythe%3A%2F%2Fandroid.googlesource.com%2Fplatform%2Fsuperproject%3Flang%3Dc%252B%252B%3Fpath%3Dframeworks%2Fav%2Fmedia%2Flibstagefright%2FMetaDataUtils.cpp%23qvSncmH16_8O525UVnjhF02yQxXeYmmzVr8xKNrjQao\u0026gs\u003dkythe%3A%2F%2Fandroid.googlesource.com%2Fplatform%2Fsuperproject%3Flang%3Dc%252B%252B%3Fpath%3Dframeworks%2Fav%2Fmedia%2Flibstagefright%2Finclude%2Fmedia%2Fstagefright%2FMetaDataUtils.h%23xk-IpPyRlyOemT3k6SAtYFvOD1NhVf1d4OuuZw5h-6c",
      "parentUuid": "ed1ba4fc_a2c85011",
      "range": {
        "startLine": 305,
        "startChar": 62,
        "endLine": 305,
        "endChar": 84
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ac413e4_38167c60",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-31T21:47:44Z",
      "side": 1,
      "message": "the thing that had me somewhat confused is how this is then range checked against\nkMaxSamplingFreqIndex which is a local construct.\n\nnow that I see the local is meant to mimic the table buried within the called routine, it makes more sense.  see my comments about adding comments for the local table.",
      "parentUuid": "685e5ce2_c2441b51",
      "range": {
        "startLine": 305,
        "startChar": 62,
        "endLine": 305,
        "endChar": 84
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb265bc5_6a923c00",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 319,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "perhaps a null string (\"\") would be better?\n\nalthough maybe ASSERT_STREQ() is taking care to check for null pointers first, so it\nwould be safe.   I know that \"\" just takes null off the table as a possible value.",
      "range": {
        "startLine": 319,
        "startChar": 13,
        "endLine": 319,
        "endChar": 23
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f686dda9_03108336",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 319,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb265bc5_6a923c00",
      "range": {
        "startLine": 319,
        "startChar": 13,
        "endLine": 319,
        "endChar": 23
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2404890_a62805e3",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "if we can memcmp(), then we should assert csdMedaDataBaseSize \u003d\u003d csdAMediaFormatSize.",
      "range": {
        "startLine": 347,
        "startChar": 65,
        "endLine": 347,
        "endChar": 84
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3eb46d3f_12787fb0",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "help me understand why they can be compared with memcmp() instead of needing to look\nat particular fields.",
      "range": {
        "startLine": 347,
        "startChar": 10,
        "endLine": 347,
        "endChar": 19
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db3ae295_a7381eb2",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Ray, we are comparing the data stored in the format(AMediaFormat and MetaDataBase) which is a part of the bitstream, thus they will be same for valid test vectors.",
      "parentUuid": "3eb46d3f_12787fb0",
      "range": {
        "startLine": 347,
        "startChar": 10,
        "endLine": 347,
        "endChar": 19
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16c133fb_273df920",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2404890_a62805e3",
      "range": {
        "startLine": 347,
        "startChar": 65,
        "endLine": 347,
        "endChar": 84
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4571b0d4_87166078",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-31T21:47:44Z",
      "side": 1,
      "message": "i was convinced that these were different types -- that one was void* and the other\nwas MetaData*.... which is what had me worried about memcmp().\n\nI don\u0027t know why I was convinced of that; just that I was.  I now see they are both void* here.",
      "parentUuid": "db3ae295_a7381eb2",
      "range": {
        "startLine": 347,
        "startChar": 10,
        "endLine": 347,
        "endChar": 19
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b77056e_c986a0e5",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 371,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "lets make sure to initialize this, and all of these.  I think \"\" instead of NULL\nbut that\u0027s so that the ASSERT_STREQ() won\u0027t get into any null-pointer-dereference problems.",
      "range": {
        "startLine": 371,
        "startChar": 16,
        "endLine": 371,
        "endChar": 25
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0828fa78_5f56f42c",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 371,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b77056e_c986a0e5",
      "range": {
        "startLine": 371,
        "startChar": 16,
        "endLine": 371,
        "endChar": 25
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9f9b3cc_c1bebf2b",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "let\u0027s look at a name like \"AacKnownInvalidTest\" or something like that.\nI want to highlight that we\u0027re testing known-bad content.",
      "range": {
        "startLine": 379,
        "startChar": 24,
        "endLine": 379,
        "endChar": 38
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be225a8d_a47a0b2a",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9f9b3cc_c1bebf2b",
      "range": {
        "startLine": 379,
        "startChar": 24,
        "endLine": 379,
        "endChar": 38
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3b57fb5_930433f6",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 416,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-07-29T03:03:08Z",
      "side": 1,
      "message": "reading https://en.wikipedia.org/wiki/Vorbis_comment\nit says that vorbis tags are case insensitive.\n\nshould this tag.compare() be case insensitive?",
      "range": {
        "startLine": 416,
        "startChar": 25,
        "endLine": 416,
        "endChar": 44
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f4aa169_8bbc6ba9",
        "filename": "media/libstagefright/tests/metadatautils/MetaDataUtilsTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 416,
      "author": {
        "id": 1572775
      },
      "writtenOn": "2020-07-31T13:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3b57fb5_930433f6",
      "range": {
        "startLine": 416,
        "startChar": 25,
        "endLine": 416,
        "endChar": 44
      },
      "revId": "8fd279d347a0da85654d9183dbdffd30402df842",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}