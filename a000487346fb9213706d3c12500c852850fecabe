{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "04fa4e56_adfa81b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2024-01-16T14:31:08Z",
      "side": 1,
      "message": "To check my understanding, the extra checks added here are really to accommodate the fuzzer passing extreme values, right? The bug is rated NSI, but IÂ guess hitting these cases causes the fuzzer to stop making progress?\n\nHigh level question: if that\u0027s the case, why do we need checks in multiple places rather than just in the method that returns whether a sample is valid? I\u0027d rather centralize all the checks in one place as far as possible.",
      "revId": "a000487346fb9213706d3c12500c852850fecabe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "727d0b0d_666d566e",
        "filename": "media/libstagefright/MPEG4Writer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2294,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2024-01-16T14:31:08Z",
      "side": 1,
      "message": "To check my understanding, is the reason to add `mTimeScaleByTrackIndex` at the `MPEG4Writer` level rather than exposing a method `Track::getTimeScale() { return mTimeScale; }` because of the HEIF case where `mTimeScale` is undefined rather than -1?\n\nThe reason I\u0027m asking is that I initially thought it would be cleaner to use the vector of tracks instead of adding a new collection for this. I wonder if we can safely switch to setting `Track.mTimeScale` to zero for HEIF instead of adding the new collection.",
      "range": {
        "startLine": 2292,
        "startChar": 0,
        "endLine": 2294,
        "endChar": 0
      },
      "revId": "a000487346fb9213706d3c12500c852850fecabe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "326e5eeb_2dc0a1a4",
        "filename": "media/libstagefright/MPEG4Writer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2460,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2024-01-16T14:31:08Z",
      "side": 1,
      "message": "Please briefly document what the threshold checks are doing so that a reader without context can understand them -- the comment about `lastDurationUs` is not sufficient to understand 5E5 for example.",
      "range": {
        "startLine": 2450,
        "startChar": 0,
        "endLine": 2460,
        "endChar": 5
      },
      "revId": "a000487346fb9213706d3c12500c852850fecabe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c88bc99b_371d0f66",
        "filename": "media/libstagefright/MPEG4Writer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3939,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2024-01-16T14:31:08Z",
      "side": 1,
      "message": "Should this go next to the malformed media check on L3924-L3929 in this snapshot? It seems like it\u0027s doing something similar but not releasing/stopping when it probably should?",
      "range": {
        "startLine": 3937,
        "startChar": 0,
        "endLine": 3939,
        "endChar": 13
      },
      "revId": "a000487346fb9213706d3c12500c852850fecabe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdace301_4e8b90ee",
        "filename": "media/libstagefright/MPEG4Writer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4914,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2024-01-16T14:31:08Z",
      "side": 1,
      "message": "Hm, I don\u0027t follow how this can be false?",
      "range": {
        "startLine": 4914,
        "startChar": 0,
        "endLine": 4914,
        "endChar": 71
      },
      "revId": "a000487346fb9213706d3c12500c852850fecabe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}