{
  "comments": [
    {
      "key": {
        "uuid": "356a689b_73db2662",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 759,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "0 not OK",
      "range": {
        "startLine": 759,
        "startChar": 26,
        "endLine": 759,
        "endChar": 28
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14ca38d8_f45e1a50",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 761,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "so for an input file that is 1M, we\u0027re going to allocate 2M worth of buffer?\nI would expect the extractor output to be no larger than the input.\n\nif it was doing a decode, i could see it getting larger. but don\u0027t understand why it\nwould be larger in the extractor....",
      "range": {
        "startLine": 761,
        "startChar": 50,
        "endLine": 761,
        "endChar": 66
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1a53f36_9e87fe4b",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 766,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "stat returns 0, not OK.",
      "range": {
        "startLine": 766,
        "startChar": 25,
        "endLine": 766,
        "endChar": 30
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5170efd_798dfbd3",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 773,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "i\u0027d prefer initializing it here to on line 742;\nthat\u0027s stylistic.",
      "range": {
        "startLine": 773,
        "startChar": 22,
        "endLine": 773,
        "endChar": 32
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ddd2de0_c520a11d",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 787,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "formatting.\nalso be verbose -- i\u0027d like an ALOGI() here that we\u0027re skipping a particular test.",
      "range": {
        "startLine": 787,
        "startChar": 24,
        "endLine": 787,
        "endChar": 33
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0833ddf1_e2d98249",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 825,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "before we memcpy() we need to convince ourselves that we don\u0027t overflow the mExtractorOutput[] buffers.\n\nin this case \u0027convince\u0027 means \u0027test it here before the memcpy\u0027.",
      "range": {
        "startLine": 825,
        "startChar": 15,
        "endLine": 825,
        "endChar": 37
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6cf100b_5fb178cc",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 853,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "the [0] [1] vs 1 2  comments on line 865 hold here.\nand really everywhere.",
      "range": {
        "startLine": 853,
        "startChar": 46,
        "endLine": 853,
        "endChar": 59
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59ec3d0b_176ea5c9",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 862,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "let\u0027s make this } else if (strncmp... \"video/\") {",
      "range": {
        "startLine": 862,
        "startChar": 4,
        "endLine": 862,
        "endChar": 12
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2af91cf_185ab23e",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 866,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "if we\u0027re going to use [0] and [1] for the arrays\nthen we should have width0 and width1\ninstead of width1 and width2\n\nsimilarly for height.",
      "range": {
        "startLine": 864,
        "startChar": 32,
        "endLine": 866,
        "endChar": 97
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5041145d_751fc078",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 871,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "and this would then be\n} else {\n    ASSERT() // it\u0027s a failure\n}",
      "range": {
        "startLine": 871,
        "startChar": 3,
        "endLine": 871,
        "endChar": 5
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6471321c_d7341199",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 882,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "should be 0, not OK.",
      "range": {
        "startLine": 882,
        "startChar": 21,
        "endLine": 882,
        "endChar": 25
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e8ca77a_183bf025",
        "filename": "media/extractors/tests/ExtractorUnitTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 889,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-05-05T21:26:44Z",
      "side": 1,
      "message": "the nested pair construct seems forced.\nsince we control the input filenames we feed to it, we should be able to use the suffix\nto tell us the container type.",
      "range": {
        "startLine": 888,
        "startChar": 27,
        "endLine": 889,
        "endChar": 80
      },
      "revId": "de9c7671b52805f986fba678b2b35a21a3e7278d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}