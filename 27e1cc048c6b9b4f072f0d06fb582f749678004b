{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0c55b560_9daf9b20",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-10-30T09:19:48Z",
      "side": 1,
      "message": "Can this method be called from different threads? I am not familiar with the C++ memory model but I noticed that a mutex is taken out below, so I was wondering if this should go after we take out the lock to ensure that any previous timestamp writes are visible.",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 211,
        "endChar": 58
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7f289d1_a875aa9e",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1546599
      },
      "writtenOn": "2023-10-31T00:30:13Z",
      "side": 1,
      "message": "The lock is only for mState variable and the rest of the members are accessed without a lock.\nSo I don\u0027t think it is necessary to do this after locking.",
      "parentUuid": "0c55b560_9daf9b20",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 211,
        "endChar": 58
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9cfe43f4_c7d7e4c9",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-11-20T09:59:40Z",
      "side": 1,
      "message": "Resolving as the code changed.",
      "parentUuid": "d7f289d1_a875aa9e",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 211,
        "endChar": 58
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "440fc0de_70269035",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-10-30T09:19:48Z",
      "side": 1,
      "message": "- Should this return `-EINVAL` rather than `INVALID_OPERATION`? It seems more similar to the case below on L231.\n- Just to check, what is the effect of returning one of these errors at the Java layer of the API?",
      "range": {
        "startLine": 212,
        "startChar": 15,
        "endLine": 212,
        "endChar": 32
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60d9bf90_b1a44e14",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1958021
      },
      "writtenOn": "2023-10-31T13:55:19Z",
      "side": 1,
      "message": "Updated the return type to -EINVAL.",
      "parentUuid": "440fc0de_70269035",
      "range": {
        "startLine": 212,
        "startChar": 15,
        "endLine": 212,
        "endChar": 32
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4caeed77_54b50d1e",
        "filename": "media/libstagefright/MediaMuxer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1546599
      },
      "writtenOn": "2023-10-31T14:09:29Z",
      "side": 1,
      "message": "\u003e Just to check, what is the effect of returning one of these errors at the Java layer of the API?\n\nIn that case an exception is thrown at Java layer.\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/media/jni/android_media_MediaMuxer.cpp;l\u003d130;drc\u003d51804e92e8897a81f2cee4c6fe4bda0b20c3949a",
      "parentUuid": "60d9bf90_b1a44e14",
      "range": {
        "startLine": 212,
        "startChar": 15,
        "endLine": 212,
        "endChar": 32
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e2aaf43_1e1638ec",
        "filename": "media/libstagefright/include/media/stagefright/MediaWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-10-30T09:19:48Z",
      "side": 1,
      "message": "Given this looks only at the same metadata, maybe `isSampleTimeValid`? Or `isSampleMetadataValid`?",
      "range": {
        "startLine": 58,
        "startChar": 17,
        "endLine": 58,
        "endChar": 34
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4805d269_23770d66",
        "filename": "media/libstagefright/include/media/stagefright/MediaWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1958021
      },
      "writtenOn": "2023-10-31T13:55:19Z",
      "side": 1,
      "message": "Updated the method name to isSampleMetadataValid.",
      "parentUuid": "1e2aaf43_1e1638ec",
      "range": {
        "startLine": 58,
        "startChar": 17,
        "endLine": 58,
        "endChar": 34
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c5404a7_980cea4f",
        "filename": "media/libstagefright/include/media/stagefright/MediaWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-10-30T09:19:48Z",
      "side": 1,
      "message": "Can this be pure virtual as well? I didn\u0027t spot where this implementation is used.",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "970040ff_ffbe2989",
        "filename": "media/libstagefright/include/media/stagefright/MediaWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1546599
      },
      "writtenOn": "2023-10-31T00:30:13Z",
      "side": 1,
      "message": "Making this pure virtual would mean that every writer needs to implement this.\nThe current plan is to do this only for webmwriter.\n\nA similar approach was taken for isFdOpenModeValid() which was needed webm to do something different than other writers.",
      "parentUuid": "1c5404a7_980cea4f",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f729924e_14b826e5",
        "filename": "media/libstagefright/include/media/stagefright/MediaWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-11-20T09:59:40Z",
      "side": 1,
      "message": "I see, thanks for the info.",
      "parentUuid": "970040ff_ffbe2989",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "089b49e1_553ffb18",
        "filename": "media/libstagefright/webm/WebmWriter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-10-30T09:19:48Z",
      "side": 1,
      "message": "Similarly to the comment above, is this always non-negative?",
      "range": {
        "startLine": 74,
        "startChar": 8,
        "endLine": 74,
        "endChar": 15
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "439934f7_7bf91ff4",
        "filename": "media/libstagefright/webm/WebmWriter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1546599
      },
      "writtenOn": "2023-10-31T00:30:13Z",
      "side": 1,
      "message": "Given that timeUs is int64_t (because MediaMuxer::writeSampleData takes a int64_t) would it be okay to keep this as int64_t? else we will need some typecasts.",
      "parentUuid": "089b49e1_553ffb18",
      "range": {
        "startLine": 74,
        "startChar": 8,
        "endLine": 74,
        "endChar": 15
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ddb189d8_4f536c2c",
        "filename": "media/libstagefright/webm/WebmWriter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-11-20T09:59:40Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "439934f7_7bf91ff4",
      "range": {
        "startLine": 74,
        "startChar": 8,
        "endLine": 74,
        "endChar": 15
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cf835f0_c35bb720",
        "filename": "media/libstagefright/webm/WebmWriter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-10-30T09:19:48Z",
      "side": 1,
      "message": "What is the significance of this constant? I am wondering if it should have a comment to explain what\u0027s going on.",
      "range": {
        "startLine": 75,
        "startChar": 21,
        "endLine": 75,
        "endChar": 39
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebb51baf_20465290",
        "filename": "media/libstagefright/webm/WebmWriter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1958021
      },
      "writtenOn": "2023-10-31T13:55:19Z",
      "side": 1,
      "message": "Added this check to prevent timesUs overflow when adding lastDurationUs in WebmFrameMediaSourceThread.",
      "parentUuid": "5cf835f0_c35bb720",
      "range": {
        "startLine": 75,
        "startChar": 21,
        "endLine": 75,
        "endChar": 39
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87f8cfa6_d3be8c8d",
        "filename": "media/libstagefright/webm/WebmWriter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-10-30T09:19:48Z",
      "side": 1,
      "message": "Do we need to store a previous timestamp per-track? I was surprised that we have a track index but it\u0027s unused.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 25
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16a81826_ff641689",
        "filename": "media/libstagefright/webm/WebmWriter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1546599
      },
      "writtenOn": "2023-10-31T00:30:13Z",
      "side": 1,
      "message": "Andrew, \nThanks for flagging this.\nYes, this needs to be saved per track and computation of lastDurationUs also needs to be per track.\n\nSohail,\nGiven that track index can be an arbitrary value, please use a map to store per track previous timestamp.",
      "parentUuid": "87f8cfa6_d3be8c8d",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 25
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f344f2fb_5c63ab59",
        "filename": "media/libstagefright/webm/WebmWriter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1958021
      },
      "writtenOn": "2023-10-31T13:55:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16a81826_ff641689",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 25
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ef0e979_b68b4875",
        "filename": "media/libstagefright/webm/include/webm/WebmWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-10-30T09:19:48Z",
      "side": 1,
      "message": "Nit: Should this be initialized with the constructor like the fields just above, or is there a reason for it to be different from the others?",
      "range": {
        "startLine": 73,
        "startChar": 23,
        "endLine": 73,
        "endChar": 27
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04512d14_7505b7a0",
        "filename": "media/libstagefright/webm/include/webm/WebmWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-10-30T09:19:48Z",
      "side": 1,
      "message": "Can this ever be assigned a negative value? I am wondering if it would be better to make it a uint64_t to make it clearer that the checked time is non-negative.",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 73,
        "endChar": 11
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2750afd5_19660188",
        "filename": "media/libstagefright/webm/include/webm/WebmWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1546599
      },
      "writtenOn": "2023-10-31T00:30:13Z",
      "side": 1,
      "message": "Given that MediaMuxer::writeSampleData takes a int64_t, would it be okay to keep this as int64_t? else we will need some typecasts.",
      "parentUuid": "04512d14_7505b7a0",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 73,
        "endChar": 11
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce1e5241_ea40b667",
        "filename": "media/libstagefright/webm/include/webm/WebmWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1958021
      },
      "writtenOn": "2023-10-31T13:55:19Z",
      "side": 1,
      "message": "Created a map to store the previous timestamp based on the track index.",
      "parentUuid": "4ef0e979_b68b4875",
      "range": {
        "startLine": 73,
        "startChar": 23,
        "endLine": 73,
        "endChar": 27
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "475cc41e_b9ff557e",
        "filename": "media/libstagefright/webm/include/webm/WebmWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1958021
      },
      "writtenOn": "2023-11-03T06:19:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce1e5241_ea40b667",
      "range": {
        "startLine": 73,
        "startChar": 23,
        "endLine": 73,
        "endChar": 27
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc513e02_e07e6f62",
        "filename": "media/libstagefright/webm/include/webm/WebmWriter.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1060104
      },
      "writtenOn": "2023-11-20T09:59:40Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2750afd5_19660188",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 73,
        "endChar": 11
      },
      "revId": "27e1cc048c6b9b4f072f0d06fb582f749678004b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}