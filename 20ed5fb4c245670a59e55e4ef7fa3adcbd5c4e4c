{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cf56965e_2abcce9d",
        "filename": "media/libaudioclient/tests/audio_test_utils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 471,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "Please use TemporaryFile from https://cs.android.com/android/platform/superproject/+/master:system/libbase/include/android-base/file.h. It\u0027s a standard tool for tests.",
      "range": {
        "startLine": 468,
        "startChar": 0,
        "endLine": 471,
        "endChar": 36
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c54afd4_21b3941d",
        "filename": "media/libaudioclient/tests/audio_test_utils.h",
        "patchSetId": 7
      },
      "lineNbr": 198,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "Please use std::string.",
      "range": {
        "startLine": 198,
        "startChar": 4,
        "endLine": 198,
        "endChar": 30
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8ffb69a_3eae98cb",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "There is an equivalent android::base::StringPrintf: http://cs/android/system/libbase/include/android-base/stringprintf.h",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 49,
        "endChar": 67
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff11ac8d_9b40b055",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 57,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "nit: In C++, it\u0027s sufficient to say \u0027struct CaptureEnv\u0027, the way which uses \u0027typedef\u0027 is a C legacy.",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 14
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49277d8a_69bfccc2",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 65,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "String initializes itself this way by default, no need to specify anything here.",
      "range": {
        "startLine": 65,
        "startChar": 20,
        "endLine": 65,
        "endChar": 24
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0926173e_e18581bb",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 81,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "const std::vector\u003cint\u003e\u0026",
      "range": {
        "startLine": 81,
        "startChar": 23,
        "endLine": 81,
        "endChar": 39
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad6f0145_f6f367b1",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 84,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "`std::min(totalFrameCount, numSamples)` would be more canonical.",
      "range": {
        "startLine": 84,
        "startChar": 16,
        "endLine": 84,
        "endChar": 78
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24408b92_d134d16a",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 95,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "I think it will help readability if you make this function a static method of \u0027CaptureEnv\u0027. Same for \u0027playAudio\u0027.\n\nAn even better approach is to make this function a non-static member, so that instead of writing, say, `env-\u003emDumpFileName` you could write just `mDumpFileName`. A static \"trampoline\" \u0027void(void*)\u0027 function is still needed though:\n\n```\nvoid* captureAudio(void* args) {\n    static_cast\u003cCaptureEnv*\u003e(args)-\u003ecapture();\n    return nullptr;\n}\n```\n\nAlthough, if `std::thread` were employed instead of pthread functions, then the trampoline isn\u0027t needed, see the \u0027class foo\u0027 example here: http://go/cppref/cpp/thread/thread/thread",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 95,
        "endChar": 32
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54c6fdf0_85aeff80",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 171,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "Why discarding them?",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 171,
        "endChar": 21
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44f36aa9_a6ee201e",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 266,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "Converting to a C string should not be needed.",
      "range": {
        "startLine": 266,
        "startChar": 54,
        "endLine": 266,
        "endChar": 62
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d094142f_623c2bf0",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 269,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "Here, too. Usually, all STL functions accept std::string. Conversion to C-style strings is only required if libraries from POSIX or C libraries are used directly.",
      "range": {
        "startLine": 269,
        "startChar": 49,
        "endLine": 269,
        "endChar": 57
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e84031f7_d61243b8",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 272,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "Could also use Android\u0027s TemporaryFile to avoid manual file management. Especially that with the current approach an assertion failure somewhere above will cause the function to return, and all the cleanup will be skipped.",
      "range": {
        "startLine": 272,
        "startChar": 12,
        "endLine": 272,
        "endChar": 48
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57c07672_7f01920f",
        "filename": "media/libaudioclient/tests/audioeffect_analyser.cpp",
        "patchSetId": 7
      },
      "lineNbr": 300,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2022-11-01T19:02:40Z",
      "side": 1,
      "message": "Also here, with test code that can exit at any point it\u0027s safer resource-wise to use classes that clean up on destruction. For this particular purpose, an std::vector with the allocator provided by Pffft can be used.",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 30
      },
      "revId": "20ed5fb4c245670a59e55e4ef7fa3adcbd5c4e4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}