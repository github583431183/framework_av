{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "233af555_ac79f51d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-10-27T17:43:41Z",
      "side": 1,
      "message": "the length stuff is all good now; thanks for reworking that.\n\nthe input buffer -- i\u0027d like to make that dynamically sized so that we can detect\nif the codec overruns the supplied input.\n\nfor me, that would be the last needed change.",
      "revId": "7aad5ddebf8b45c5309ac05e0d2ccc547eb06104",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23855a2a_13a267ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2020-10-28T21:29:08Z",
      "side": 1,
      "message": "Kris, \nFailing test (non-blocking fail) isn\u0027t related to this CL. It is failing due to a recent change in CTS and was failing before this CL as well.\nSo this is now ready to be submitted.\nCan you please submit?\nThanks.",
      "revId": "7aad5ddebf8b45c5309ac05e0d2ccc547eb06104",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6addebf_3d755bf4",
        "filename": "media/libstagefright/codecs/amrwbenc/fuzzer/amrwb_enc_fuzzer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-10-27T17:43:41Z",
      "side": 1,
      "message": "what i liked about using inputBuf[] here is that\n\n-- we controlled the size of inputBuff\n-- it meant we knew if the underlying codec overran the buffer.\n\nwhich is probably really relevant when we\u0027re doing shorter than expected buffers\n(e.g. the 0, 1 and other sizes).\n\n\nit looks like \"uint8_t inputBuf[minSize] \u003d {}\" (with minSize being a variable, not a constant) is part of the standard as of C99/C11  and also C++11\nso we should be good to go with that construct.\n\n\nI really like the idea of using the dynamic buffer, which should detect any OOB references.\nIf we can do that, then I think this is good to merge.",
      "range": {
        "startLine": 116,
        "startChar": 8,
        "endLine": 116,
        "endChar": 46
      },
      "revId": "7aad5ddebf8b45c5309ac05e0d2ccc547eb06104",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5807f3fe_9544028f",
        "filename": "media/libstagefright/codecs/amrwbenc/fuzzer/amrwb_enc_fuzzer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-10-27T18:23:50Z",
      "side": 1,
      "message": "size\u003d\u003d0 might be a problem for the array;\nmy recent reading of the standard is that while we can have variable length arrays,\nthey have to be non-zero size.\n\nso the array might have to be   inputBuf[ minSize?minSize:1 ]\nso that we have at least 1 byte in there.\n\notherwise, i still like the idea of a dynamic (and restricted) size buffer.",
      "parentUuid": "e6addebf_3d755bf4",
      "range": {
        "startLine": 116,
        "startChar": 8,
        "endLine": 116,
        "endChar": 46
      },
      "revId": "7aad5ddebf8b45c5309ac05e0d2ccc547eb06104",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67a29ea8_d8428137",
        "filename": "media/libstagefright/codecs/amrwbenc/fuzzer/amrwb_enc_fuzzer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1047003
      },
      "writtenOn": "2020-10-27T18:47:26Z",
      "side": 1,
      "message": "Ray,\nThere is no need to use a separate dynamic buffer here.\n\"data\" passed to LLVMTestOneInput is allocated for \"size\" bytes and\ndata is incremented as and when bytes are used from that and any OOB read will be flagged in the last call.",
      "parentUuid": "5807f3fe_9544028f",
      "range": {
        "startLine": 116,
        "startChar": 8,
        "endLine": 116,
        "endChar": 46
      },
      "revId": "7aad5ddebf8b45c5309ac05e0d2ccc547eb06104",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52a27623_85ad058d",
        "filename": "media/libstagefright/codecs/amrwbenc/fuzzer/amrwb_enc_fuzzer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2020-10-28T19:30:07Z",
      "side": 1,
      "message": "that\u0027ll work for me.",
      "parentUuid": "67a29ea8_d8428137",
      "range": {
        "startLine": 116,
        "startChar": 8,
        "endLine": 116,
        "endChar": 46
      },
      "revId": "7aad5ddebf8b45c5309ac05e0d2ccc547eb06104",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}