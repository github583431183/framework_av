/******************************************************************************
 *
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *****************************************************************************
 * Originally developed and contributed by Ittiam Systems Pvt. Ltd, Bangalore
 */
cc_defaults {
    name: "extractor-fuzzerbase-defaults",

    local_include_dirs: [
        "include",
    ],

    export_include_dirs: [
        "include",
    ],

    static_libs: [
        "liblog",
        "libstagefright_foundation",
        "libmediandk_format",
        "libmedia_ndkformatpriv",
    ],

    shared_libs: [
        "libutils",
        "libbinder",
        "libbase",
        "libcutils",
    ],

    target: {
        darwin: {
            enabled: false,
        },
    },
}

cc_library_static {
    name: "libextractorfuzzerbase",
    defaults: ["extractor-fuzzerbase-defaults"],
    host_supported: true,

    srcs: [
        "ExtractorFuzzerBase.cpp",
    ],
}

cc_defaults {
    name: "extractor-fuzzer-defaults",
    defaults: ["extractor-fuzzerbase-defaults"],

    static_libs: [
        "libextractorfuzzerbase",
    ],

    fuzz_config: {
        cc: [
            "android-media-fuzzing-reports@google.com",
        ],
        componentid: 155276,
    },
}

cc_fuzz {
    name: "mp4_extractor_fuzzer",
    defaults: ["extractor-fuzzer-defaults"],
    host_supported: true,

    srcs: [
        "mp4_extractor_fuzzer.cpp",
    ],

    include_dirs: [
        "frameworks/av/media/extractors/mp4",
    ],

    header_libs: [
        "libaudioclient_headers",
    ],

    static_libs: [
        "libstagefright_id3",
        "libstagefright_esds",
        "libmp4extractor",
    ],

    dictionary: "mp4_extractor_fuzzer.dict",
}

cc_fuzz {
    name: "wav_extractor_fuzzer",
    defaults: ["extractor-fuzzer-defaults"],

    srcs: [
        "wav_extractor_fuzzer.cpp",
    ],

    include_dirs: [
        "frameworks/av/media/extractors/wav",
    ],

    static_libs: [
        "libmedia",
        "libfifo",
        "libwavextractor",
    ],

    shared_libs: [
        "libbinder_ndk",
    ],
}

cc_fuzz {
    name: "amr_extractor_fuzzer",
    defaults: ["extractor-fuzzer-defaults"],

    srcs: [
        "amr_extractor_fuzzer.cpp",
    ],

    include_dirs: [
        "frameworks/av/media/extractors/amr",
    ],

    static_libs: [
        "libmedia",
        "libamrextractor",
    ],

    dictionary: "amr_extractor_fuzzer.dict",
}

cc_fuzz {
    name: "mkv_extractor_fuzzer",
    defaults: ["extractor-fuzzer-defaults"],

    srcs: [
        "mkv_extractor_fuzzer.cpp",
    ],

    include_dirs: [
        "frameworks/av/media/extractors/mkv",
    ],

    static_libs: [
        "libmedia",
        "libwebm",
        "libstagefright_flacdec",
        "libstagefright_metadatautils",
        "libmkvextractor",
        "libFLAC",
    ],

    dictionary: "mkv_extractor_fuzzer.dict",
}

cc_fuzz {
    name: "ogg_extractor_fuzzer",
    defaults: ["extractor-fuzzer-defaults"],

    srcs: [
        "ogg_extractor_fuzzer.cpp",
    ],

    include_dirs: [
        "frameworks/av/media/extractors/ogg",
    ],

    static_libs: [
        "libmedia",
        "libstagefright_metadatautils",
        "libvorbisidec",
        "liboggextractor",
    ],

    dictionary: "ogg_extractor_fuzzer.dict",
}

cc_fuzz {
    name: "mpeg2ps_extractor_fuzzer",
    defaults: ["extractor-fuzzer-defaults"],

    srcs: [
        "mpeg2_extractor_fuzzer.cpp",
    ],

    include_dirs: [
        "frameworks/av/media/extractors/mpeg2",
        "frameworks/av/media/libstagefright",
    ],

    static_libs: [
        "libstagefright_foundation_without_imemory",
        "libmedia",
        "libstagefright_mpeg2support",
        "libstagefright_mpeg2extractor",
        "libstagefright_esds",
        "libmpeg2extractor",
    ],

    cflags: [
        "-DMPEG2PS",
    ],

    shared_libs: [
        "android.hardware.cas@1.0",
        "android.hardware.cas.native@1.0",
        "android.hidl.token@1.0-utils",
        "android.hidl.allocator@1.0",
        "libcrypto",
        "libhidlmemory",
        "libhidlbase",
    ],

    dictionary: "mpeg2ps_extractor_fuzzer.dict",
}

cc_fuzz {
    name: "mpeg2ts_extractor_fuzzer",
    defaults: ["extractor-fuzzer-defaults"],

    srcs: [
        "mpeg2_extractor_fuzzer.cpp",
    ],

    include_dirs: [
        "frameworks/av/media/extractors/mpeg2",
        "frameworks/av/media/libstagefright",
    ],

    static_libs: [
        "libstagefright_foundation_without_imemory",
        "libmedia",
        "libstagefright_mpeg2support",
        "libstagefright_mpeg2extractor",
        "libstagefright_esds",
        "libmpeg2extractor",
    ],

    shared_libs: [
        "android.hardware.cas@1.0",
        "android.hardware.cas.native@1.0",
        "android.hidl.token@1.0-utils",
        "android.hidl.allocator@1.0",
        "libcrypto",
        "libhidlmemory",
        "libhidlbase",
    ],

    dictionary: "mpeg2ts_extractor_fuzzer.dict",
}

cc_fuzz {
    name: "mp3_extractor_fuzzer",
    defaults: ["extractor-fuzzer-defaults"],

    srcs: [
        "mp3_extractor_fuzzer.cpp",
    ],

    include_dirs: [
        "frameworks/av/media/extractors/mp3",
    ],

    static_libs: [
        "libmedia",
        "libfifo",
        "libmp3extractor",
        "libstagefright_id3",
    ],
}

cc_fuzz {
    name: "aac_extractor_fuzzer",
    defaults: ["extractor-fuzzer-defaults"],

    srcs: [
        "aac_extractor_fuzzer.cpp",
    ],

    include_dirs: [
        "frameworks/av/media/extractors/aac",
    ],

    static_libs: [
        "libmedia",
        "libaacextractor",
        "libstagefright_metadatautils",
    ],
}

cc_fuzz {
    name: "flac_extractor_fuzzer",
    defaults: ["extractor-fuzzer-defaults"],

    srcs: [
        "flac_extractor_fuzzer.cpp",
    ],

    include_dirs: [
        "frameworks/av/media/extractors/flac",
    ],

    static_libs: [
        "libmedia",
        "libstagefright_metadatautils",
        "libFLAC",
        "libflacextractor",
    ],

    shared_libs: [
        "libbinder_ndk",
    ],

    dictionary: "flac_extractor_fuzzer.dict",
}
