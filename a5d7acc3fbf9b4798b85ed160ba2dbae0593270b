{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "78cc58c3_af8f91af",
        "filename": "media/libstagefright/rtsp/JitterCalculator.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1021605
      },
      "writtenOn": "2021-09-03T08:51:09Z",
      "side": 1,
      "message": "could it be this the logic that\u0027s overflowing? If so a similar adjustment as there is originally in putInterArrivalData() could solve that.",
      "range": {
        "startLine": 48,
        "startChar": 31,
        "endLine": 48,
        "endChar": 69
      },
      "revId": "a5d7acc3fbf9b4798b85ed160ba2dbae0593270b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "820e5dd4_ba318580",
        "filename": "media/libstagefright/rtsp/JitterCalculator.cpp",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1021605
      },
      "writtenOn": "2021-09-02T17:25:11Z",
      "side": 1,
      "message": "Can you please elaborate why the additional logic is needed? It seems that the overflow is trying to correct for this operation, where it ensures that both tempRtpTime and tempLastTimeStamp are in the same period. This operation does not concern mFirstTimeStamp.",
      "range": {
        "startLine": 68,
        "startChar": 34,
        "endLine": 68,
        "endChar": 65
      },
      "revId": "a5d7acc3fbf9b4798b85ed160ba2dbae0593270b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e392d3c_53211b78",
        "filename": "media/libstagefright/rtsp/JitterCalculator.cpp",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1647935
      },
      "writtenOn": "2021-09-03T11:53:03Z",
      "side": 1,
      "message": "Hi Lajos.\nLet me present an example when the fix is not applied.\nLet 2 consecutive RTP time as\n\nA \u003d 2^31 - a    (a \u0026 b are a few kilo scale natural number)\nB \u003d 2^31 + b\n\nBecause of the bug,\nthe two temporal value in line 64 \u0026 65 for calculation will be\nA\u0027 \u003d 2^31 - a + 2^32 (wrong overflow masking added 2^32)\nB\u0027 \u003d 2^31 + b        \n\nAnd a difference D of the two temporal will be,\nD \u003d A\u0027 - B\u0027 \u003d 2^32 - a + b\nSo the difference D will be around 2^32. Then line 68 is\ndiffTimeStampUs \u003d D * 1000000 / 90000 \u003d D * 11.1111\n\nThe diffTimeStampUs definitely overs int32 range.\nSo varianceUs in line 73 also be over the range,\nthen line 74 makes overflow when adding the varianceUs.",
      "parentUuid": "820e5dd4_ba318580",
      "range": {
        "startLine": 68,
        "startChar": 34,
        "endLine": 68,
        "endChar": 65
      },
      "revId": "a5d7acc3fbf9b4798b85ed160ba2dbae0593270b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f05bfc0d_f20b5a6b",
        "filename": "media/libstagefright/rtsp/JitterCalculator.cpp",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1647935
      },
      "writtenOn": "2021-09-03T12:52:25Z",
      "side": 1,
      "message": "because line 74 mInterArrivalJitterUs is int32",
      "parentUuid": "0e392d3c_53211b78",
      "range": {
        "startLine": 68,
        "startChar": 34,
        "endLine": 68,
        "endChar": 65
      },
      "revId": "a5d7acc3fbf9b4798b85ed160ba2dbae0593270b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a7b0b07_7dd4fb11",
        "filename": "media/libstagefright/rtsp/JitterCalculator.cpp",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1647935
      },
      "writtenOn": "2021-09-04T06:34:07Z",
      "side": 1,
      "message": "In a testing, a variance D was\n47721825566 (\u003d 4294964305 * 11.1, \u003d 0xfffffff4 e38ec70a)\nIt would be saved in mInterArrivalJitterUs as 0xe38exxxx .\nThis makes overflows on the next calling when (mInterArrivalJitterUs * 15) executes\n\nHm..turning mInterArrivalUs \u0026 mBaseJitterUs into int64 from int32 would makes safer. Shall I ?",
      "parentUuid": "f05bfc0d_f20b5a6b",
      "range": {
        "startLine": 68,
        "startChar": 34,
        "endLine": 68,
        "endChar": 65
      },
      "revId": "a5d7acc3fbf9b4798b85ed160ba2dbae0593270b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}