{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b7d44441_678ceeb8",
        "filename": "media/libstagefright/httplive/fuzzer/httplive_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 1952285
      },
      "writtenOn": "2023-04-14T22:37:01Z",
      "side": 1,
      "message": "What if the file failed to open?",
      "range": {
        "startLine": 215,
        "startChar": 2,
        "endLine": 215,
        "endChar": 46
      },
      "revId": "99100c33634b7d52c87a8ee359a1110209bb5189",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f0b38db_4113dd73",
        "filename": "media/libstagefright/httplive/fuzzer/httplive_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 1858334
      },
      "writtenOn": "2023-04-24T08:54:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7d44441_678ceeb8",
      "range": {
        "startLine": 215,
        "startChar": 2,
        "endLine": 215,
        "endChar": 46
      },
      "revId": "99100c33634b7d52c87a8ee359a1110209bb5189",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a61a248_1205ac6e",
        "filename": "media/libstagefright/httplive/fuzzer/httplive_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1952285
      },
      "writtenOn": "2023-04-14T22:37:01Z",
      "side": 1,
      "message": "what is the need for const_cast here? You can move filePtr into this scope or pass as argument directly.",
      "range": {
        "startLine": 233,
        "startChar": 16,
        "endLine": 233,
        "endChar": 36
      },
      "revId": "99100c33634b7d52c87a8ee359a1110209bb5189",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6424e733_ad08a77f",
        "filename": "media/libstagefright/httplive/fuzzer/httplive_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1858334
      },
      "writtenOn": "2023-04-24T08:54:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a61a248_1205ac6e",
      "range": {
        "startLine": 233,
        "startChar": 16,
        "endLine": 233,
        "endChar": 36
      },
      "revId": "99100c33634b7d52c87a8ee359a1110209bb5189",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2461c89_a8cf037b",
        "filename": "media/libstagefright/httplive/fuzzer/httplive_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 344,
      "author": {
        "id": 1868610
      },
      "writtenOn": "2022-12-12T21:39:49Z",
      "side": 1,
      "message": "i noticed that the exec/s was 1, is this the primary line driving it?\nis kWaitTime in seconds?",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 344,
        "endChar": 66
      },
      "revId": "99100c33634b7d52c87a8ee359a1110209bb5189",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a878cf7_b98ec4fb",
        "filename": "media/libstagefright/httplive/fuzzer/httplive_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 344,
      "author": {
        "id": 1858334
      },
      "writtenOn": "2022-12-13T12:28:33Z",
      "side": 1,
      "message": "1. Httplive\u0027s APIs are asynchronous in nature. Hence in order to synchronize the flow locks and conditional variables have been added. In this case the fuzzer waits till the HTTP download is complete. The wait_until waits till the conidition is set to TRUE or till the timeout (whichever is earlier).\n2. The wait time is in seconds. However, it is only the max duration. If the download completes earlier, then it would unblock earlier.",
      "parentUuid": "f2461c89_a8cf037b",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 344,
        "endChar": 66
      },
      "revId": "99100c33634b7d52c87a8ee359a1110209bb5189",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c744ed83_59b9b6a9",
        "filename": "media/libstagefright/httplive/fuzzer/httplive_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 344,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2023-06-01T11:43:56Z",
      "side": 1,
      "message": "execs/sec \u003d\u003d 1 would seem to point towards that timeout being exercised.\n\nmaybe some experiments are justified.: keep track of how often we timeout vs returning sooner [wait_until() returns status information that tells us which]\nand see how often we timeout vs returning sooner.\n\n[that original question is not from 6 months ago, so I don\u0027t know if we\u0027re\nstil seeing 1 exec/sec or if it\u0027s running faster now.",
      "parentUuid": "1a878cf7_b98ec4fb",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 344,
        "endChar": 66
      },
      "revId": "99100c33634b7d52c87a8ee359a1110209bb5189",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37ec2f38_ef47fde6",
        "filename": "media/libstagefright/httplive/fuzzer/httplive_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 344,
      "author": {
        "id": 1858334
      },
      "writtenOn": "2023-06-19T08:55:08Z",
      "side": 1,
      "message": "We are experiencing immediate timeouts when using the wait() function instead of wait_until(). Waiting at this specific code point is essential to ensure the proper execution of the connect() API. The connect() function takes nearly around 0.03 seconds to execute, hence, we have updated the wait time accordingly. The current execution speed is 50 executions per second.",
      "parentUuid": "c744ed83_59b9b6a9",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 344,
        "endChar": 66
      },
      "revId": "99100c33634b7d52c87a8ee359a1110209bb5189",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}