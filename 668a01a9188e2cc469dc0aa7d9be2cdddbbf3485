{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ff002bdb_4cda2d4a",
        "filename": "media/codec2/core/include/C2Config.h",
        "patchSetId": 23
      },
      "lineNbr": 197,
      "author": {
        "id": 1021605
      },
      "writtenOn": "2022-01-14T20:10:41Z",
      "side": 1,
      "message": "see the name change below. This must match the name of the struct.",
      "range": {
        "startLine": 197,
        "startChar": 4,
        "endLine": 197,
        "endChar": 47
      },
      "revId": "668a01a9188e2cc469dc0aa7d9be2cdddbbf3485",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76dd9e8c_70823fd3",
        "filename": "media/codec2/core/include/C2Config.h",
        "patchSetId": 23
      },
      "lineNbr": 197,
      "author": {
        "id": 1903520
      },
      "writtenOn": "2022-01-15T05:10:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff002bdb_4cda2d4a",
      "range": {
        "startLine": 197,
        "startChar": 4,
        "endLine": 197,
        "endChar": 47
      },
      "revId": "668a01a9188e2cc469dc0aa7d9be2cdddbbf3485",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c86e0db_f0863412",
        "filename": "media/codec2/core/include/C2Config.h",
        "patchSetId": 23
      },
      "lineNbr": 275,
      "author": {
        "id": 1021605
      },
      "writtenOn": "2022-01-14T20:41:29Z",
      "side": 1,
      "message": "after this is the next platform-specific index.",
      "range": {
        "startLine": 275,
        "startChar": 4,
        "endLine": 275,
        "endChar": 35
      },
      "revId": "668a01a9188e2cc469dc0aa7d9be2cdddbbf3485",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2aac825_e8658e54",
        "filename": "media/codec2/core/include/C2Config.h",
        "patchSetId": 23
      },
      "lineNbr": 275,
      "author": {
        "id": 1903520
      },
      "writtenOn": "2022-01-15T05:10:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c86e0db_f0863412",
      "range": {
        "startLine": 275,
        "startChar": 4,
        "endLine": 275,
        "endChar": 35
      },
      "revId": "668a01a9188e2cc469dc0aa7d9be2cdddbbf3485",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b305b9f7_b86d8c17",
        "filename": "media/codec2/core/include/C2Config.h",
        "patchSetId": 23
      },
      "lineNbr": 2425,
      "author": {
        "id": 1021605
      },
      "writtenOn": "2022-01-14T20:10:41Z",
      "side": 1,
      "message": "I recommend that we make a more generic QP statistics structure to account for any future evolution of the stats. E.g. x264 seems to return average QP per MB-type, and I remember some developers asking for additional statistics beyond average (min/max/std). E.g. the following structure:\n\nstruct C2PictureQuantizationStatisticsStruct {\n    C2PictureQuantizationStatisticsStruct() : type_((C2Config::picture_type_t)0),\n                                         count(0), average(NaN), std_dev(NaN)\n                                         min(NaN), max(NaN),\n                                          {}\n    C2PictureQuantizationStatisticsStruct(C2Config::picture_type_t type, float count_,\n        float average_, float std_dev_, float min_, float max_)\n        : type_(type), count(count_), average(average_), std_dev(std_dev_), min(min_), max(max_) { }\n\n    C2Config::picture_type_t type_;\n    uint32_t count;  // \u003c\u003c\u003c number of equivalent macroblocks for this type\n    float average;   // \u003c\u003c\u003c average QP value weighted by equivalent macroblocks\n    float std_dev;   // \u003c\u003c\u003c standard deviation in QP value weighted by equivalent macroblocks; \n    float min;       // \u003c\u003c\u003c minimum QP value\n    float max;       // \u003c\u003c\u003c maximum QP value\n\n    DEFINE_AND_DESCRIBE_C2STRUCT(PictureQuantization)\n    C2FIELD(type_, \"type\")\n    C2FIELD(count, \"count\")\n    C2FIELD(average, \"avg\")  // abbreviated\n    C2FIELD(std_dev, \"std\")  // abbreviated\n    C2FIELD(min, \"min\")\n    C2FIELD(max, \"max\")\n};\n\nThere type_ could be a composite type, e.g. I | P to account for combined stats - if the per type stats is not available.\n\nThen make it \n\ntypedef C2StreamParam\u003cC2Info, C2SimpleArrayStruct\u003cC2PictureQuantizationStatisticsStruct\u003e,\n        kParamIndexPictureQuantizationStatistics\u003e C2StreamPictureQuantizationStatisticsInfo;\nconstexpr char C2_PARAMKEY_PICTURE_QP_STATS[] \u003d \"coded.qp-stats\";",
      "range": {
        "startLine": 2425,
        "startChar": 0,
        "endLine": 2425,
        "endChar": 7
      },
      "revId": "668a01a9188e2cc469dc0aa7d9be2cdddbbf3485",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b790431_1d4db0a0",
        "filename": "media/codec2/core/include/C2Config.h",
        "patchSetId": 23
      },
      "lineNbr": 2425,
      "author": {
        "id": 1021605
      },
      "writtenOn": "2022-01-14T20:34:32Z",
      "side": 1,
      "message": "I guess count could also be a float to allow NaN. This however would make re-averaging difficult. So perhaps this could be a required value and stay as uint. For whole frame this would be (width-in-blocks)*(height-in-blocks)",
      "parentUuid": "b305b9f7_b86d8c17",
      "range": {
        "startLine": 2425,
        "startChar": 0,
        "endLine": 2425,
        "endChar": 7
      },
      "revId": "668a01a9188e2cc469dc0aa7d9be2cdddbbf3485",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "049f062a_b27df1ae",
        "filename": "media/codec2/core/include/C2Config.h",
        "patchSetId": 23
      },
      "lineNbr": 2425,
      "author": {
        "id": 1021605
      },
      "writtenOn": "2022-01-14T20:41:29Z",
      "side": 1,
      "message": "If you want to keep this whole-frame, this needs to move to the platform-specific section recommend dropping the \"per frame\" as all infos are per frame. I am also requesting a new naming for platform structs to start with C2Android*Domain*ParamName*Type, so Domain\u003dStream, Type\u003dInfo, ParamName\u003dAverageBlockQuantization in this case\n\n\ntypedef C2StreamParam\u003cC2Info, C2SimpleValueStruct\u003cint32_t\u003e, kParamIndexAverageBlockQuantization\u003e\n        C2AndroidStreamAverageBlockQuantizationInfo;\nconstexpr char C2_PARAMKEY_AVERAGE_QP[] \u003d \"coded.average-qp\";",
      "parentUuid": "6b790431_1d4db0a0",
      "range": {
        "startLine": 2425,
        "startChar": 0,
        "endLine": 2425,
        "endChar": 7
      },
      "revId": "668a01a9188e2cc469dc0aa7d9be2cdddbbf3485",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb0efa0a_4f07705f",
        "filename": "media/codec2/core/include/C2Config.h",
        "patchSetId": 23
      },
      "lineNbr": 2425,
      "author": {
        "id": 1903520
      },
      "writtenOn": "2022-01-14T20:43:18Z",
      "side": 1,
      "message": "float average;  \u003d\u003d\u003e If float type, Wonsik and I expected possible compatibility issues with h/w driver to HAL to Codec2, so preferred rounded down integer.\n\nfloat min;       // \u003c\u003c\u003c minimum QP value.   \u003c\u003d\u003d\u003d the QP value is always integer, hence these \nfloat max;       // \u003c\u003c\u003c maximum QP value\n                                                  min max just need be interger?",
      "parentUuid": "6b790431_1d4db0a0",
      "range": {
        "startLine": 2425,
        "startChar": 0,
        "endLine": 2425,
        "endChar": 7
      },
      "revId": "668a01a9188e2cc469dc0aa7d9be2cdddbbf3485",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73d20203_8143de04",
        "filename": "media/codec2/core/include/C2Config.h",
        "patchSetId": 23
      },
      "lineNbr": 2425,
      "author": {
        "id": 1903520
      },
      "writtenOn": "2022-01-15T01:18:46Z",
      "side": 1,
      "message": "I think I am not clear with the meaning of \"If you want to keep this whole-frame,\" please?\n\nAssuming this is \"platform-specific\" feature, I think it is already under\n/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PLATFORM-DEFINED PARAMETERS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */\n\nFrom there to the end of the file are all for platform-specific features, I think?\n\nbtw, I forgot to say thank you for your recommendation about struct C2PictureQuantizationStatisticsStruct { }. I agree that it will be better if statistics info are maintained together as a struct here.\nFrom that sense, I\u0027d like to propose (not for this CL, but for the next version Android) extending the proposed quantization struct further to accommodate remaining other types of possible future stats such as distortion and MVs as well, i.e. struct C2PictureEncodingStatisticsStruct { }.",
      "parentUuid": "cb0efa0a_4f07705f",
      "range": {
        "startLine": 2425,
        "startChar": 0,
        "endLine": 2425,
        "endChar": 7
      },
      "revId": "668a01a9188e2cc469dc0aa7d9be2cdddbbf3485",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "130754fe_1d7a5936",
        "filename": "media/codec2/core/include/C2Config.h",
        "patchSetId": 23
      },
      "lineNbr": 2425,
      "author": {
        "id": 1903520
      },
      "writtenOn": "2022-01-18T23:33:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73d20203_8143de04",
      "range": {
        "startLine": 2425,
        "startChar": 0,
        "endLine": 2425,
        "endChar": 7
      },
      "revId": "668a01a9188e2cc469dc0aa7d9be2cdddbbf3485",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}