// *** THIS PACKAGE HAS SPECIAL LICENSING CONDITIONS.  PLEASE
//     CONSULT THE OWNERS AND opensource-licensing@google.com BEFORE
//     DEPENDING ON IT IN YOUR PROJECT. ***
package {
    default_applicable_licenses: ["frameworks_av_license"],
}

// Added automatically by a large-scale-change that took the approach of
// 'apply every license found to every target'. While this makes sure we respect
// every license restriction, it may not be entirely correct.
//
// e.g. GPL in an MIT project might only apply to the contrib/ directory.
//
// Please consider splitting the single license below into multiple licenses,
// taking care not to lose any license_kind information, and overriding the
// default license using the 'licenses: [...]' property on targets as needed.
//
// For unused files, consider creating a 'fileGroup' with "//visibility:private"
// to attach the license to, and including a comment whether the files may be
// used in the current project.
// See: http://go/android-license-faq
license {
    name: "frameworks_av_license",
    visibility: [":__subpackages__"],
    license_kinds: [
        "SPDX-license-identifier-Apache-2.0",
        "SPDX-license-identifier-BSD",
        "SPDX-license-identifier-MIT",
        "SPDX-license-identifier-Unicode-DFS",
        "legacy_by_exception_only", // by exception only
    ],
    license_text: [
        "NOTICE",
    ],
}

aidl_interface {
    name: "av-types-aidl",
    unstable: true,
    host_supported: true,
    vendor_available: true,
    double_loadable: true,
    local_include_dir: "aidl",
    srcs: [
        "aidl/android/media/InterpolatorConfig.aidl",
        "aidl/android/media/InterpolatorType.aidl",
        "aidl/android/media/MicrophoneInfoFw.aidl",
        "aidl/android/media/VolumeShaperConfiguration.aidl",
        "aidl/android/media/VolumeShaperConfigurationOptionFlag.aidl",
        "aidl/android/media/VolumeShaperConfigurationType.aidl",
        "aidl/android/media/VolumeShaperOperation.aidl",
        "aidl/android/media/VolumeShaperOperationFlag.aidl",
        "aidl/android/media/VolumeShaperState.aidl",
    ],
    defaults: [
        "latest_android_media_audio_common_types_import_interface",
    ],
    backend: {
        cpp: {
            min_sdk_version: "29",
            apex_available: [
                "//apex_available:platform",
                "com.android.btservices",
                "com.android.media",
                "com.android.media.swcodec",
            ],
        },
        java: {
            sdk_version: "module_current",
        },
    },
}

cc_library_headers {
    name: "av-headers",
    export_include_dirs: ["include"],
    static_libs: [
        "av-types-aidl-cpp",
    ],
    export_static_lib_headers: [
        "av-types-aidl-cpp",
    ],
    header_libs: [
        "libaudio_aidl_conversion_common_util_cpp",
    ],
    export_header_lib_headers: [
        "libaudio_aidl_conversion_common_util_cpp",
    ],
    host_supported: true,
    vendor_available: true,
    double_loadable: true,
    min_sdk_version: "29",
    apex_available: [
        "//apex_available:platform",
        "com.android.btservices",
        "com.android.media",
        "com.android.media.swcodec",
    ],
    target: {
        darwin: {
            enabled: false,
        },
    },
}

aidl_interface {
    name: "av-audio-types-aidl",
    unstable: true,
    host_supported: true,
    vendor_available: true,
    double_loadable: true,
    local_include_dir: "aidl",
    srcs: [
        "aidl/android/media/audio/IHalAdapterVendorExtension.aidl",
    ],
    defaults: [
        "latest_android_hardware_audio_core_import_interface",
    ],
    backend: {
        // The C++ backend is disabled transitively due to use of FMQ by the audio core HAL.
        cpp: {
            enabled: false,
        },
        java: {
            sdk_version: "module_current",
        },
    },
}

test_spec {
    name: "frameworks-av-test-spec-4943966050844672",
    teamId: 4943966050844672,
    tests: [
        "VtsHalMediaC2V1_0TargetMasterTest",
        "VtsHalMediaC2V1_0TargetVideoDecTest",
        "VtsHalMediaC2V1_0TargetVideoEncTest",
        "VtsHalMediaC2V1_0TargetAudioDecTest",
        "VtsHalMediaC2V1_0TargetAudioEncTest",
        "VtsHalMediaC2V1_0TargetComponentTest"
    ],
}

test_spec {
    name: "frameworks-av-test-spec-5823575353065472",
    teamId: 5823575353065472,
    tests: [
        "sounddosemanager_tests",
        "EffectPreprocessingTest",
        "correlation",
        "AudioPreProcessingTest",
        "preprocessing_benchmark",
        "mixerops_tests",
        "resampler_tests",
        "libaudioprocessing_resampler_fuzzer",
        "libaudioprocessing_record_buffer_converter_fuzzer",
        "mixerops_benchmark",
        "spatializer_benchmark",
        "SpatializerTest",
        "mediasyncevent_tests",
        "monotonicframecounter_tests",
        "synchronizedrecordstate_tests",
        "oboeservice_fuzzer",
        "audioflinger_fuzzer",
        "audiopolicy_engineconfig_tests",
        "audiopolicy_fuzzer",
        "audiopolicy_aidl_fuzzer",
        "audio_health_tests",
        "audiopolicy_tests",
        "test_create_audiotrack",
        "trackplayerbase_tests",
        "audioclient_serialization_tests",
        "audiorecord_tests",
        "test_create_audiorecord",
        "audiotrack_tests",
        "audio_aidl_conversion_tests",
        "audiosystem_tests",
        "audio_aidl_status_tests",
        "audioeffect_analysis",
        "audioeffect_tests",
        "audiorouting_tests",
        "audioflinger_aidl_fuzzer",
        "write_sine",
        "aaudio_loopback",
        "input_monitor",
        "input_monitor_callback",
        "write_sine_callback",
        "media_log_fuzzer",
        "downmix_tests",
        "downmix_benchmark",
        "downmixtest",
        "CoreAudioHalAidlTest",
        "EffectProxyTest",
        "EffectsFactoryHalInterfaceTest",
        "libaaudio_fuzzer",
        "test_various",
        "test_interference",
        "test_atomic_fifo",
        "test_session_id",
        "test_flowgraph",
        "test_histogram",
        "aaudio_test_mmap_path",
        "test_clock_model",
        "test_aaudio_marshalling",
        "test_monotonic_counter",
        "test_callback_race",
        "test_resampler",
        "test_attributes",
        "test_block_adapter",
        "test_full_queue",
        "test_open_params",
        "libheadtracking-test",
        "lvm_benchmark",
        "lvmtest",
        "EffectReverbTest",
        "reverb_benchmark",
        "reverb_test",
        "snr",
        "EffectBundleTest",
        "libmediautils_fuzzer_time_check",
        "libmediautils_fuzzer_battery_notifier",
        "libmediautils_fuzzer_scheduling_policy_service",
        "libmediautils_fuzzer_service_utilities",
        "methodstatistics_tests",
        "mediautils_fixedstring_tests",
        "timecheck_tests",
        "mediautils_scopedstatistics_tests",
        "timerthread_tests",
        "media_process_tests",
        "media_threadsnapshot_tests",
        "extended_accumulator_tests",
        "library_tests",
        "shared_memory_allocator_tests",
        "inplace_function_tests",
        "libmediautils_test",
        "static_string_tests",
        "media_synchronization_tests",
        "shmemTest"
    ],
}

test_spec {
    name: "frameworks-av-test-spec-6455244783222784",
    teamId: 6455244783222784,
    tests: [
        "camera_captureResult_fuzzer",
        "camera_SessionStats_fuzzer",
        "camera_vendorTagDescriptor_fuzzer",
        "camera_Parameters_fuzzer",
        "camera_c2OutputConfiguration_fuzzer",
        "camera_c2CaptureRequest_fuzzer",
        "camera_c2SubmitInfo_fuzzer",
        "camera_c2ConcurrentCamera_fuzzer",
        "camera_c2SessionConfiguration_fuzzer",
        "camera_fuzzer",
        "ACameraNdkVendorTest"
    ],
}
