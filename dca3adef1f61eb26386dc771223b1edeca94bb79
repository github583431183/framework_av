{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0993bdcb_271a5031",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2024-05-14T16:54:44Z",
      "side": 1,
      "message": "Andy is the Mutex Master now ðŸ˜Š",
      "revId": "dca3adef1f61eb26386dc771223b1edeca94bb79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fdff45d_47e4d68d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2024-05-14T17:37:42Z",
      "side": 1,
      "message": "Agree, this is a problem.  I checked, and this is one of the complex thread safety parts that we haven\u0027t resolved yet.  Adding Shunkai to see what he thinks.\n\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/av/services/audioflinger/Effects.cpp;drc\u003d9f6b4d688dfb6d6604d987e1d5441fbd49932265;l\u003d3093\n\n\nWe are better off caching the frameSize while we have the lock.\n\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/av/services/audioflinger/Effects.cpp;drc\u003d9f6b4d688dfb6d6604d987e1d5441fbd49932265;l\u003d2203",
      "revId": "dca3adef1f61eb26386dc771223b1edeca94bb79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67f25d7d_fb194577",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1060750
      },
      "writtenOn": "2024-05-15T00:42:00Z",
      "side": 1,
      "message": "Can we add thread safety annotation to catch this?",
      "revId": "dca3adef1f61eb26386dc771223b1edeca94bb79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38f42a09_74ad3a97",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2024-05-15T00:48:37Z",
      "side": 1,
      "message": "Eventually that is the goal, yes.  This stuff is a bit complex, so there are many gaps.  It will take time.",
      "parentUuid": "67f25d7d_fb194577",
      "revId": "dca3adef1f61eb26386dc771223b1edeca94bb79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "614d9500_c68bb9c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3425628
      },
      "writtenOn": "2024-05-20T11:26:18Z",
      "side": 1,
      "message": "Hello Shunkai, please help to review, Thanks",
      "revId": "dca3adef1f61eb26386dc771223b1edeca94bb79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e94aca64_f125fee3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1956242
      },
      "writtenOn": "2024-05-20T22:18:57Z",
      "side": 1,
      "message": "Thanks for submitting the fix Wei!\nYes this is in the category of known issue with EffectCallback/ThreadBase locking as Andy pointed out, we didn\u0027t got chance to fix them.\nThe CL is an valid fix for `EffectCallback::inChannelMask()`, but maybe this is not a pattern we want to follow, because there are more than a few callbacks have similar problem...\n\nFor this specific case, it seems to me we don\u0027t really need a callback into `IAfThreadBase` to get channelMask, might better to have Thread set the channelMask to EffectChain whenever there is a EffectChain change?\nSame approach can be applied for sampleRate()/frameCount() and all of EffectCallback::is*() methods, what do you think? @elaurent@google.com",
      "parentUuid": "7fdff45d_47e4d68d",
      "revId": "dca3adef1f61eb26386dc771223b1edeca94bb79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}