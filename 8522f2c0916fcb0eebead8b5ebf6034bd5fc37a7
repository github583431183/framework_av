{
  "comments": [
    {
      "key": {
        "uuid": "00c36f09_4bcf56a7",
        "filename": "services/camera/libcameraservice/api1/client2/Parameters.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2111,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2017-07-18T18:14:23Z",
      "side": 1,
      "message": "if we\u0027re going to account for this, we also need to make sure the adjusted region doesn\u0027t exceed the bounds of the active array after it\u0027s increased.",
      "revId": "8522f2c0916fcb0eebead8b5ebf6034bd5fc37a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18201641_d3b3cebe",
        "filename": "services/camera/libcameraservice/api1/client2/Parameters.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2111,
      "author": {
        "id": 1060513
      },
      "writtenOn": "2017-07-18T18:32:01Z",
      "side": 1,
      "message": "Second Eddy\u0027s point.\nAlso, what was the zoom ratio when you hit this? Do you have a very large zoom ratio causing a almost zero size metering area?",
      "parentUuid": "00c36f09_4bcf56a7",
      "revId": "8522f2c0916fcb0eebead8b5ebf6034bd5fc37a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2cae398b_30eebae1",
        "filename": "services/camera/libcameraservice/api1/client2/Parameters.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2111,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2017-07-18T18:37:14Z",
      "side": 1,
      "message": "Yeah, I expect you\u0027d hit this most when zoomed and doing tap to focus.\n\nNot that a metering region that small would be expected to be stable, but API1 doesn\u0027t really have a way to communicate that to the app.  \n\nIn API2, I\u0027d recommend apps clamp the minimum region size to some number of active pixels (10x10? probably too small still), but not sure we\u0027d want to do that unilaterally in the API1-\u003eHAL3 logic.",
      "parentUuid": "18201641_d3b3cebe",
      "revId": "8522f2c0916fcb0eebead8b5ebf6034bd5fc37a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba06c9e7_9e6d5faf",
        "filename": "services/camera/libcameraservice/api1/client2/Parameters.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2111,
      "author": {
        "id": 1060513
      },
      "writtenOn": "2017-07-18T18:39:43Z",
      "side": 1,
      "message": "I see in the bug that you are hitting this while running CTS metering area test (which does issue a very small metering area, but I don\u0027t think that test is using digital zoom?\n(Not saying we shouldn\u0027t make this change, but would like to understand what exactly triggered your CTS failure)",
      "parentUuid": "2cae398b_30eebae1",
      "revId": "8522f2c0916fcb0eebead8b5ebf6034bd5fc37a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a15a20d3_272a8eb8",
        "filename": "services/camera/libcameraservice/api1/client2/Parameters.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2111,
      "author": {
        "id": 1022419
      },
      "writtenOn": "2017-07-19T03:04:00Z",
      "side": 1,
      "message": "Hi Eddy and Yin-Chia, thanks for your review.\n\nYes, CTS metering area test actually doesnâ€™t use digital zoom. CTS failure happens when active array size itself is enough small. Concretely issue happens when width or height less than 2000. \n\nEven if active array size is not small, rounding error happens when zooming.",
      "parentUuid": "ba06c9e7_9e6d5faf",
      "revId": "8522f2c0916fcb0eebead8b5ebf6034bd5fc37a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fc019cc_ee198934",
        "filename": "services/camera/libcameraservice/api1/client2/Parameters.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2111,
      "author": {
        "id": 1022419
      },
      "writtenOn": "2017-07-19T03:04:00Z",
      "side": 1,
      "message": "Hi Eddy, thanks for your review.\n\nAccording to this implementation,\n\n int Parameters::normalizedXToCrop(int x) const {\n     CropRegion previewCrop \u003d calculateCropRegion(/*previewOnly*/ true);\n     return (x + 1000) * (previewCrop.width - 1) / 2000;\n }\n\nx \u003d 1000 is only the case that calculated region has the max value for the bounds of active array. In case that x \u003d 999, calculated region has less value than max value for the bounds of active array. Therefore, in case of (999, 999, 1000, 1000), the condition \"reqMeteringAreas[i + 0] \u003d\u003d reqMeteringAreas[i + 2]\" has to be false and increment will not happen.\n\nIn other any case, calculated region always less than max value -1 for the bounds of active array. Even if we add +1 for them, it should not exceed the bounds of active array.",
      "parentUuid": "00c36f09_4bcf56a7",
      "revId": "8522f2c0916fcb0eebead8b5ebf6034bd5fc37a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}