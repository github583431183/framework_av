{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "91a13f90_c4e1b542",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2023-01-04T17:44:10Z",
      "side": 1,
      "message": "a couple places that we aren\u0027t checking acquire_buffer() return code;\n(we weren\u0027t testing it before this CL -- this CL didn\u0027t drop any testing)\nonce those are included in the corresponding checks, I think this is good to go.",
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca510fcc_4ed94731",
        "filename": "media/module/extractors/aac/AACExtractor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2022-12-21T23:26:47Z",
      "side": 1,
      "message": "i\u0027d have thought that initializing buffer \u003d nullptr here would get\nclang to be quiet.\n\nwe have a bunch of code that follows the existing pattern (usually with an initializer).\n\nis there an annotation we can put somewhere in here (on acquire_buffer() perhaps) that will take care of the warning? it is part of the contract for this api\nthat buffer will be filled appropriately if the routine return OK).",
      "range": {
        "startLine": 313,
        "startChar": 22,
        "endLine": 313,
        "endChar": 30
      },
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f734f344_582f910c",
        "filename": "media/module/extractors/aac/AACExtractor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 1052399
      },
      "writtenOn": "2023-01-04T01:19:21Z",
      "side": 1,
      "message": "Initializing buffer to nullptr does not help.\nClang-tidy gives warning for this control flow in MediaExtractorPluginHelper.h:\n```\nframeworks/av/media/module/extractors/aac/AACExtractor.cpp:314:20: note: Calling \u0027MediaBufferGroupHelper::acquire_buffer\u0027\n    status_t err \u003d mBufferGroup-\u003eacquire_buffer(\u0026buffer);\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nframeworks/av/include/media/MediaExtractorPluginHelper.h:105:13: note: Assuming \u0027ret\u0027 is equal to AMEDIA_OK\n        if (ret \u003d\u003d AMEDIA_OK \u0026\u0026 buf !\u003d nullptr) {\n            ^~~~~~~~~~~~~~~~\nframeworks/av/include/media/MediaExtractorPluginHelper.h:105:13: note: Left side of \u0027\u0026\u0026\u0027 is true \nframeworks/av/include/media/MediaExtractorPluginHelper.h:105:33: note: Assuming the condition is false\n        if (ret \u003d\u003d AMEDIA_OK \u0026\u0026 buf !\u003d nullptr) {\n                                ^~~~~~~~~~~~~~\nframeworks/av/include/media/MediaExtractorPluginHelper.h:105:9: note: Taking false branch\n        if (ret \u003d\u003d AMEDIA_OK \u0026\u0026 buf !\u003d nullptr) {\n        ^\nframeworks/av/include/media/MediaExtractorPluginHelper.h:115:13: note: Null pointer value stored to \u0027buffer\u0027\n            *buffer \u003d nullptr;\n            ^~~~~~~~~~~~~~~~~\n```\nAlthough that is an impossible flow, static analyzer cannot know that without seeing the code in mGroup-\u003eacquire_buffer(...) in MediaExtractorPluginHelper.h.\nHence, to suppress these analyzer warnings, we need to handle the condition where acquire_buffer returns OK and buffer is nullptr.",
      "parentUuid": "ca510fcc_4ed94731",
      "range": {
        "startLine": 313,
        "startChar": 22,
        "endLine": 313,
        "endChar": 30
      },
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1414e0b5_8ed8c071",
        "filename": "media/module/extractors/amr/AMRExtractor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2022-12-21T23:26:47Z",
      "side": 1,
      "message": "i\u0027m less enamored with this pattern as i look at each time in this CL.\nI realize it\u0027s here to get the compiler to be quiet.\n\nBut it feels like the compiler\u0027s warning message is taking us down a path where we have to make our api\u0027s that have this pattern be referenced with what I\u0027m going to call \"trust but verify\".",
      "range": {
        "startLine": 346,
        "startChar": 9,
        "endLine": 346,
        "endChar": 31
      },
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c469d266_4b5393ed",
        "filename": "media/module/extractors/amr/AMRExtractor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1052399
      },
      "writtenOn": "2023-01-04T01:19:21Z",
      "side": 1,
      "message": "Would the owners/users of acquire_buffer prefer the following rule?\n* Since it always assign nullptr to buffer when the return status is not OK,\n  the test of (err !\u003d OK) can be replaced with (buffer \u003d\u003d nullptr).",
      "parentUuid": "1414e0b5_8ed8c071",
      "range": {
        "startLine": 346,
        "startChar": 9,
        "endLine": 346,
        "endChar": 31
      },
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54242a1f_dc74e5cb",
        "filename": "media/module/extractors/amr/AMRExtractor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2023-01-04T04:36:42Z",
      "side": 1,
      "message": "well, i\u0027m wrong:  it seems that acquire_buffer doesn\u0027t make the guarantee that I thought it did:\n\nfrom frameworks/av/media/libstagefright/include/media/stagefright/MediaBufferGroup.h\n\nif (err \u003d\u003d OK \u0026\u0026 acquiredBuf !\u003d nullptr) {\n    *buf \u003d acquiredBuf-\u003ewrap();\n} else {\n    *buf \u003d nullptr;\n}\nreturn translate_error(err);\n            \nwhich does have a path that returns OK but passes back a null pointer.\n\nin light of this, this CL is likely mostly right (the places where we don\u0027t check the return code of acquire_buffer() being something we should rectify as part of this).  I\u0027ll take a look tomorrow.",
      "parentUuid": "c469d266_4b5393ed",
      "range": {
        "startLine": 346,
        "startChar": 9,
        "endLine": 346,
        "endChar": 31
      },
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04c2060c_0ba558cf",
        "filename": "media/module/extractors/mkv/MatroskaExtractor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 802,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2022-12-21T23:26:47Z",
      "side": 1,
      "message": "bigger problem is that we ignore the return value here, which tells us whether\nmbuf has been filled in with a useful answer.",
      "range": {
        "startLine": 802,
        "startChar": 6,
        "endLine": 802,
        "endChar": 40
      },
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31c691bb_e900f496",
        "filename": "media/module/extractors/mkv/MatroskaExtractor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 802,
      "author": {
        "id": 1052399
      },
      "writtenOn": "2023-01-04T01:19:21Z",
      "side": 1,
      "message": "Should we return AMEDIA_ERROR_UNKNOWN if\n  (return_value !\u003d OK || !mbuf)",
      "parentUuid": "04c2060c_0ba558cf",
      "range": {
        "startLine": 802,
        "startChar": 6,
        "endLine": 802,
        "endChar": 40
      },
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "832ac626_7ae011bf",
        "filename": "media/module/extractors/mkv/MatroskaExtractor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 802,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2023-01-04T17:44:10Z",
      "side": 1,
      "message": "yes, please -- get the status from acquire_buffer() and\nthen do the \"if (status !\u003d ok || !mbuf) return AMEDIA_ERROR_UNKNOWN;\" \nconstruct.",
      "parentUuid": "31c691bb_e900f496",
      "range": {
        "startLine": 802,
        "startChar": 6,
        "endLine": 802,
        "endChar": 40
      },
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e04ee76_90baa042",
        "filename": "media/module/extractors/mpeg2/MPEG2PSExtractor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 707,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2023-01-04T17:44:10Z",
      "side": 1,
      "message": "let\u0027s get a status from acquire_buffer() \nand do if (status !\u003d ok || !outbuf) here....",
      "range": {
        "startLine": 707,
        "startChar": 2,
        "endLine": 707,
        "endChar": 18
      },
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e48e47c4_bb988321",
        "filename": "media/module/extractors/mpeg2/MPEG2TSExtractor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2023-01-04T17:44:10Z",
      "side": 1,
      "message": "collect status returned from acquire_buffer() and use it as part of the \nconditional.",
      "range": {
        "startLine": 190,
        "startChar": 5,
        "endLine": 190,
        "endChar": 18
      },
      "revId": "07defafdb743287b5b9de2536436d0b6a4d932d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}