{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "074adc6d_bc8fdc28",
        "filename": "media/codec2/hal/client/GraphicsTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 461,
      "author": {
        "id": 1018606
      },
      "writtenOn": "2023-11-21T18:27:13Z",
      "side": 1,
      "message": "can we pull write pipe operations as methods? e.g.\n\n```\nvoid GraphicsTracker::closeWritePipe() {\n    std::unique_lock\u003cstd::mutex\u003e fl(mWritePipeLock);\n    int writeFd \u003d mWritePipeFd.release();\n    ::close(writeFd);\n}\n```\n\n\n```suggestion\n        closeWritePipe();\n```",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 9
      },
      "revId": "4959877c294a5530d8172ffbeef527927b0cea3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be17ad2d_abf545ad",
        "filename": "media/codec2/hal/client/GraphicsTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 487,
      "author": {
        "id": 1018606
      },
      "writtenOn": "2023-11-21T18:27:13Z",
      "side": 1,
      "message": "similarly:\n\n```\nint GraphicsTracker::writeToPipe(int inc) {\n    thread_local char buf[kMaxDequeueMax];\n    std::unique_lock\u003cstd::mutex\u003e fl(mWritePipeLock);\n    int writeFd \u003d mWritePipeFd.get();\n    if (writeFd \u003c 0) {\n        return -1;\n    }\n    return ::write(writeFd, buf, inc);\n}\n```\n\n```suggestion\n        ret \u003d writeToPipe(inc);\n        if (ret \u003c 0) {\n            // writeFd will be closed only on stop()\n            return;\n        }\n```",
      "range": {
        "startLine": 479,
        "startChar": 3,
        "endLine": 487,
        "endChar": 9
      },
      "revId": "4959877c294a5530d8172ffbeef527927b0cea3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}